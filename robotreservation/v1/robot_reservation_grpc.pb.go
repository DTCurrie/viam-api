// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotReservationServiceClient is the client API for RobotReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotReservationServiceClient interface {
	// Create reservation
	//  - User is the user logged in
	//  - viam employees can add any user to the list.
	CreateRobotReservation(ctx context.Context, in *CreateRobotReservationRequest, opts ...grpc.CallOption) (*CreateRobotReservationResponse, error)
	// Delete reservation
	//  - Can delete reservation if logged in user the same as reservation
	//  - viam employees can remove anyones.
	DeleteRobotReservation(ctx context.Context, in *DeleteRobotReservationRequest, opts ...grpc.CallOption) (*DeleteRobotReservationResponse, error)
	// List reservations
	//  - viam employees can list all reservations.
	ListRobotReservations(ctx context.Context, in *ListRobotReservationsRequest, opts ...grpc.CallOption) (*ListRobotReservationsResponse, error)
	// Get reservation
	//  - Can get reservation if logged in user the same as reservation
	//  - viam employees can get anyones.
	GetRobotReservation(ctx context.Context, in *GetRobotReservationRequest, opts ...grpc.CallOption) (*GetRobotReservationResponse, error)
	// Create and register a robot processor.
	//  - Returns a key/config to provision the raspberry pi with.
	CreateRobotProcessor(ctx context.Context, in *CreateRobotProcessorRequest, opts ...grpc.CallOption) (*CreateRobotProcessorResponse, error)
	// Deletes a robot processor.
	DeleteRobotProcessor(ctx context.Context, in *DeleteRobotProcessorRequest, opts ...grpc.CallOption) (*DeleteRobotProcessorResponse, error)
	// List robot processors.
	ListRobotProcessors(ctx context.Context, in *ListRobotProcessorsRequest, opts ...grpc.CallOption) (*ListRobotProcessorsResponse, error)
	// Robot Board - attempt to process.
	//   - If queue is empty, return nothing and tell robot to sleep for X.
	//
	//   - If queue has item in it:
	//     - Find and update highest priority, oldest item.
	//     - Update with state:APP_PROVISIONING and metadata.
	//     - Start create/associating robot/part/org details. If failed state=FAILED
	//     - If completed update with APP_PROVISIONED.
	//     - Return details about the org. And tell robot to provision /etc/viam.json.
	// Notes:
	//  - Need to handle cases where state=APP_PROVISIONING but robot failed to update to WORKING. Next request
	//  by the same robot process should return the same queue item.
	//  - Need to handle cases where APP_PROVISIONING fails completely and stuck in state.
	TryProcess(ctx context.Context, in *TryProcessRequest, opts ...grpc.CallOption) (*TryProcessResponse, error)
	// Update the state to WORKING or FAILED when the robot is ready.
	UpdateProcessState(ctx context.Context, in *UpdateProcessStateRequest, opts ...grpc.CallOption) (*UpdateProcessStateResponse, error)
}

type robotReservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotReservationServiceClient(cc grpc.ClientConnInterface) RobotReservationServiceClient {
	return &robotReservationServiceClient{cc}
}

func (c *robotReservationServiceClient) CreateRobotReservation(ctx context.Context, in *CreateRobotReservationRequest, opts ...grpc.CallOption) (*CreateRobotReservationResponse, error) {
	out := new(CreateRobotReservationResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/CreateRobotReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) DeleteRobotReservation(ctx context.Context, in *DeleteRobotReservationRequest, opts ...grpc.CallOption) (*DeleteRobotReservationResponse, error) {
	out := new(DeleteRobotReservationResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/DeleteRobotReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) ListRobotReservations(ctx context.Context, in *ListRobotReservationsRequest, opts ...grpc.CallOption) (*ListRobotReservationsResponse, error) {
	out := new(ListRobotReservationsResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/ListRobotReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) GetRobotReservation(ctx context.Context, in *GetRobotReservationRequest, opts ...grpc.CallOption) (*GetRobotReservationResponse, error) {
	out := new(GetRobotReservationResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/GetRobotReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) CreateRobotProcessor(ctx context.Context, in *CreateRobotProcessorRequest, opts ...grpc.CallOption) (*CreateRobotProcessorResponse, error) {
	out := new(CreateRobotProcessorResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/CreateRobotProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) DeleteRobotProcessor(ctx context.Context, in *DeleteRobotProcessorRequest, opts ...grpc.CallOption) (*DeleteRobotProcessorResponse, error) {
	out := new(DeleteRobotProcessorResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/DeleteRobotProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) ListRobotProcessors(ctx context.Context, in *ListRobotProcessorsRequest, opts ...grpc.CallOption) (*ListRobotProcessorsResponse, error) {
	out := new(ListRobotProcessorsResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/ListRobotProcessors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) TryProcess(ctx context.Context, in *TryProcessRequest, opts ...grpc.CallOption) (*TryProcessResponse, error) {
	out := new(TryProcessResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/TryProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotReservationServiceClient) UpdateProcessState(ctx context.Context, in *UpdateProcessStateRequest, opts ...grpc.CallOption) (*UpdateProcessStateResponse, error) {
	out := new(UpdateProcessStateResponse)
	err := c.cc.Invoke(ctx, "/robotreservation.v1.RobotReservationService/UpdateProcessState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotReservationServiceServer is the server API for RobotReservationService service.
// All implementations must embed UnimplementedRobotReservationServiceServer
// for forward compatibility
type RobotReservationServiceServer interface {
	// Create reservation
	//  - User is the user logged in
	//  - viam employees can add any user to the list.
	CreateRobotReservation(context.Context, *CreateRobotReservationRequest) (*CreateRobotReservationResponse, error)
	// Delete reservation
	//  - Can delete reservation if logged in user the same as reservation
	//  - viam employees can remove anyones.
	DeleteRobotReservation(context.Context, *DeleteRobotReservationRequest) (*DeleteRobotReservationResponse, error)
	// List reservations
	//  - viam employees can list all reservations.
	ListRobotReservations(context.Context, *ListRobotReservationsRequest) (*ListRobotReservationsResponse, error)
	// Get reservation
	//  - Can get reservation if logged in user the same as reservation
	//  - viam employees can get anyones.
	GetRobotReservation(context.Context, *GetRobotReservationRequest) (*GetRobotReservationResponse, error)
	// Create and register a robot processor.
	//  - Returns a key/config to provision the raspberry pi with.
	CreateRobotProcessor(context.Context, *CreateRobotProcessorRequest) (*CreateRobotProcessorResponse, error)
	// Deletes a robot processor.
	DeleteRobotProcessor(context.Context, *DeleteRobotProcessorRequest) (*DeleteRobotProcessorResponse, error)
	// List robot processors.
	ListRobotProcessors(context.Context, *ListRobotProcessorsRequest) (*ListRobotProcessorsResponse, error)
	// Robot Board - attempt to process.
	//   - If queue is empty, return nothing and tell robot to sleep for X.
	//
	//   - If queue has item in it:
	//     - Find and update highest priority, oldest item.
	//     - Update with state:APP_PROVISIONING and metadata.
	//     - Start create/associating robot/part/org details. If failed state=FAILED
	//     - If completed update with APP_PROVISIONED.
	//     - Return details about the org. And tell robot to provision /etc/viam.json.
	// Notes:
	//  - Need to handle cases where state=APP_PROVISIONING but robot failed to update to WORKING. Next request
	//  by the same robot process should return the same queue item.
	//  - Need to handle cases where APP_PROVISIONING fails completely and stuck in state.
	TryProcess(context.Context, *TryProcessRequest) (*TryProcessResponse, error)
	// Update the state to WORKING or FAILED when the robot is ready.
	UpdateProcessState(context.Context, *UpdateProcessStateRequest) (*UpdateProcessStateResponse, error)
	mustEmbedUnimplementedRobotReservationServiceServer()
}

// UnimplementedRobotReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRobotReservationServiceServer struct {
}

func (UnimplementedRobotReservationServiceServer) CreateRobotReservation(context.Context, *CreateRobotReservationRequest) (*CreateRobotReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobotReservation not implemented")
}
func (UnimplementedRobotReservationServiceServer) DeleteRobotReservation(context.Context, *DeleteRobotReservationRequest) (*DeleteRobotReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobotReservation not implemented")
}
func (UnimplementedRobotReservationServiceServer) ListRobotReservations(context.Context, *ListRobotReservationsRequest) (*ListRobotReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRobotReservations not implemented")
}
func (UnimplementedRobotReservationServiceServer) GetRobotReservation(context.Context, *GetRobotReservationRequest) (*GetRobotReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotReservation not implemented")
}
func (UnimplementedRobotReservationServiceServer) CreateRobotProcessor(context.Context, *CreateRobotProcessorRequest) (*CreateRobotProcessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobotProcessor not implemented")
}
func (UnimplementedRobotReservationServiceServer) DeleteRobotProcessor(context.Context, *DeleteRobotProcessorRequest) (*DeleteRobotProcessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobotProcessor not implemented")
}
func (UnimplementedRobotReservationServiceServer) ListRobotProcessors(context.Context, *ListRobotProcessorsRequest) (*ListRobotProcessorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRobotProcessors not implemented")
}
func (UnimplementedRobotReservationServiceServer) TryProcess(context.Context, *TryProcessRequest) (*TryProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryProcess not implemented")
}
func (UnimplementedRobotReservationServiceServer) UpdateProcessState(context.Context, *UpdateProcessStateRequest) (*UpdateProcessStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessState not implemented")
}
func (UnimplementedRobotReservationServiceServer) mustEmbedUnimplementedRobotReservationServiceServer() {
}

// UnsafeRobotReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotReservationServiceServer will
// result in compilation errors.
type UnsafeRobotReservationServiceServer interface {
	mustEmbedUnimplementedRobotReservationServiceServer()
}

func RegisterRobotReservationServiceServer(s grpc.ServiceRegistrar, srv RobotReservationServiceServer) {
	s.RegisterService(&RobotReservationService_ServiceDesc, srv)
}

func _RobotReservationService_CreateRobotReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRobotReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).CreateRobotReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/CreateRobotReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).CreateRobotReservation(ctx, req.(*CreateRobotReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_DeleteRobotReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).DeleteRobotReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/DeleteRobotReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).DeleteRobotReservation(ctx, req.(*DeleteRobotReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_ListRobotReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRobotReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).ListRobotReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/ListRobotReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).ListRobotReservations(ctx, req.(*ListRobotReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_GetRobotReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).GetRobotReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/GetRobotReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).GetRobotReservation(ctx, req.(*GetRobotReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_CreateRobotProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRobotProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).CreateRobotProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/CreateRobotProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).CreateRobotProcessor(ctx, req.(*CreateRobotProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_DeleteRobotProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).DeleteRobotProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/DeleteRobotProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).DeleteRobotProcessor(ctx, req.(*DeleteRobotProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_ListRobotProcessors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRobotProcessorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).ListRobotProcessors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/ListRobotProcessors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).ListRobotProcessors(ctx, req.(*ListRobotProcessorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_TryProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).TryProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/TryProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).TryProcess(ctx, req.(*TryProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotReservationService_UpdateProcessState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotReservationServiceServer).UpdateProcessState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotreservation.v1.RobotReservationService/UpdateProcessState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotReservationServiceServer).UpdateProcessState(ctx, req.(*UpdateProcessStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotReservationService_ServiceDesc is the grpc.ServiceDesc for RobotReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robotreservation.v1.RobotReservationService",
	HandlerType: (*RobotReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRobotReservation",
			Handler:    _RobotReservationService_CreateRobotReservation_Handler,
		},
		{
			MethodName: "DeleteRobotReservation",
			Handler:    _RobotReservationService_DeleteRobotReservation_Handler,
		},
		{
			MethodName: "ListRobotReservations",
			Handler:    _RobotReservationService_ListRobotReservations_Handler,
		},
		{
			MethodName: "GetRobotReservation",
			Handler:    _RobotReservationService_GetRobotReservation_Handler,
		},
		{
			MethodName: "CreateRobotProcessor",
			Handler:    _RobotReservationService_CreateRobotProcessor_Handler,
		},
		{
			MethodName: "DeleteRobotProcessor",
			Handler:    _RobotReservationService_DeleteRobotProcessor_Handler,
		},
		{
			MethodName: "ListRobotProcessors",
			Handler:    _RobotReservationService_ListRobotProcessors_Handler,
		},
		{
			MethodName: "TryProcess",
			Handler:    _RobotReservationService_TryProcess_Handler,
		},
		{
			MethodName: "UpdateProcessState",
			Handler:    _RobotReservationService_UpdateProcessState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robotreservation/v1/robot_reservation.proto",
}
