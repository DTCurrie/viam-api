// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "app/v1/app.proto" (package "viam.app.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AppService } from "./app_pb";
import type { DeleteRobotResponse } from "./app_pb";
import type { DeleteRobotRequest } from "./app_pb";
import type { UpdateRobotResponse } from "./app_pb";
import type { UpdateRobotRequest } from "./app_pb";
import type { NewRobotResponse } from "./app_pb";
import type { NewRobotRequest } from "./app_pb";
import type { FindRobotsResponse } from "./app_pb";
import type { FindRobotsRequest } from "./app_pb";
import type { MarkPartAsMainResponse } from "./app_pb";
import type { MarkPartAsMainRequest } from "./app_pb";
import type { DeleteRobotPartResponse } from "./app_pb";
import type { DeleteRobotPartRequest } from "./app_pb";
import type { NewRobotPartResponse } from "./app_pb";
import type { NewRobotPartRequest } from "./app_pb";
import type { UpdateRobotPartResponse } from "./app_pb";
import type { UpdateRobotPartRequest } from "./app_pb";
import type { GetRobotPartHistoryResponse } from "./app_pb";
import type { GetRobotPartHistoryRequest } from "./app_pb";
import type { TailRobotPartLogsResponse } from "./app_pb";
import type { TailRobotPartLogsRequest } from "./app_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetRobotPartLogsResponse } from "./app_pb";
import type { GetRobotPartLogsRequest } from "./app_pb";
import type { GetRobotPartResponse } from "./app_pb";
import type { GetRobotPartRequest } from "./app_pb";
import type { GetRobotPartsResponse } from "./app_pb";
import type { GetRobotPartsRequest } from "./app_pb";
import type { GetRobotResponse } from "./app_pb";
import type { GetRobotRequest } from "./app_pb";
import type { LocationAuthResponse } from "./app_pb";
import type { LocationAuthRequest } from "./app_pb";
import type { ListLocationsResponse } from "./app_pb";
import type { ListLocationsRequest } from "./app_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListOrganizationsResponse } from "./app_pb";
import type { ListOrganizationsRequest } from "./app_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service viam.app.v1.AppService
 */
export interface IAppServiceClient {
    /**
     * @generated from protobuf rpc: ListOrganizations(viam.app.v1.ListOrganizationsRequest) returns (viam.app.v1.ListOrganizationsResponse);
     */
    listOrganizations(input: ListOrganizationsRequest, options?: RpcOptions): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse>;
    /**
     * @generated from protobuf rpc: ListLocations(viam.app.v1.ListLocationsRequest) returns (viam.app.v1.ListLocationsResponse);
     */
    listLocations(input: ListLocationsRequest, options?: RpcOptions): UnaryCall<ListLocationsRequest, ListLocationsResponse>;
    /**
     * @generated from protobuf rpc: LocationAuth(viam.app.v1.LocationAuthRequest) returns (viam.app.v1.LocationAuthResponse);
     */
    locationAuth(input: LocationAuthRequest, options?: RpcOptions): UnaryCall<LocationAuthRequest, LocationAuthResponse>;
    /**
     * Get a specific robot by ID
     *
     * @generated from protobuf rpc: GetRobot(viam.app.v1.GetRobotRequest) returns (viam.app.v1.GetRobotResponse);
     */
    getRobot(input: GetRobotRequest, options?: RpcOptions): UnaryCall<GetRobotRequest, GetRobotResponse>;
    /**
     * @generated from protobuf rpc: GetRobotParts(viam.app.v1.GetRobotPartsRequest) returns (viam.app.v1.GetRobotPartsResponse);
     */
    getRobotParts(input: GetRobotPartsRequest, options?: RpcOptions): UnaryCall<GetRobotPartsRequest, GetRobotPartsResponse>;
    /**
     * Get a specific robot part by ID
     *
     * @generated from protobuf rpc: GetRobotPart(viam.app.v1.GetRobotPartRequest) returns (viam.app.v1.GetRobotPartResponse);
     */
    getRobotPart(input: GetRobotPartRequest, options?: RpcOptions): UnaryCall<GetRobotPartRequest, GetRobotPartResponse>;
    /**
     * @generated from protobuf rpc: GetRobotPartLogs(viam.app.v1.GetRobotPartLogsRequest) returns (viam.app.v1.GetRobotPartLogsResponse);
     */
    getRobotPartLogs(input: GetRobotPartLogsRequest, options?: RpcOptions): UnaryCall<GetRobotPartLogsRequest, GetRobotPartLogsResponse>;
    /**
     * @generated from protobuf rpc: TailRobotPartLogs(viam.app.v1.TailRobotPartLogsRequest) returns (stream viam.app.v1.TailRobotPartLogsResponse);
     */
    tailRobotPartLogs(input: TailRobotPartLogsRequest, options?: RpcOptions): ServerStreamingCall<TailRobotPartLogsRequest, TailRobotPartLogsResponse>;
    /**
     * Get a specific robot part histy by ID
     *
     * @generated from protobuf rpc: GetRobotPartHistory(viam.app.v1.GetRobotPartHistoryRequest) returns (viam.app.v1.GetRobotPartHistoryResponse);
     */
    getRobotPartHistory(input: GetRobotPartHistoryRequest, options?: RpcOptions): UnaryCall<GetRobotPartHistoryRequest, GetRobotPartHistoryResponse>;
    /**
     * Update a robot
     *
     * @generated from protobuf rpc: UpdateRobotPart(viam.app.v1.UpdateRobotPartRequest) returns (viam.app.v1.UpdateRobotPartResponse);
     */
    updateRobotPart(input: UpdateRobotPartRequest, options?: RpcOptions): UnaryCall<UpdateRobotPartRequest, UpdateRobotPartResponse>;
    /**
     * Create a new robot part
     *
     * @generated from protobuf rpc: NewRobotPart(viam.app.v1.NewRobotPartRequest) returns (viam.app.v1.NewRobotPartResponse);
     */
    newRobotPart(input: NewRobotPartRequest, options?: RpcOptions): UnaryCall<NewRobotPartRequest, NewRobotPartResponse>;
    /**
     * Delete a robot part
     *
     * @generated from protobuf rpc: DeleteRobotPart(viam.app.v1.DeleteRobotPartRequest) returns (viam.app.v1.DeleteRobotPartResponse);
     */
    deleteRobotPart(input: DeleteRobotPartRequest, options?: RpcOptions): UnaryCall<DeleteRobotPartRequest, DeleteRobotPartResponse>;
    /**
     * Marks the given part as the main part, and all the others as not
     *
     * @generated from protobuf rpc: MarkPartAsMain(viam.app.v1.MarkPartAsMainRequest) returns (viam.app.v1.MarkPartAsMainResponse);
     */
    markPartAsMain(input: MarkPartAsMainRequest, options?: RpcOptions): UnaryCall<MarkPartAsMainRequest, MarkPartAsMainResponse>;
    /**
     * Finds robots given a query
     *
     * @generated from protobuf rpc: FindRobots(viam.app.v1.FindRobotsRequest) returns (viam.app.v1.FindRobotsResponse);
     */
    findRobots(input: FindRobotsRequest, options?: RpcOptions): UnaryCall<FindRobotsRequest, FindRobotsResponse>;
    /**
     * NewRobot creates a new robot
     *
     * @generated from protobuf rpc: NewRobot(viam.app.v1.NewRobotRequest) returns (viam.app.v1.NewRobotResponse);
     */
    newRobot(input: NewRobotRequest, options?: RpcOptions): UnaryCall<NewRobotRequest, NewRobotResponse>;
    /**
     * UpdateRobot updates a robot
     *
     * @generated from protobuf rpc: UpdateRobot(viam.app.v1.UpdateRobotRequest) returns (viam.app.v1.UpdateRobotResponse);
     */
    updateRobot(input: UpdateRobotRequest, options?: RpcOptions): UnaryCall<UpdateRobotRequest, UpdateRobotResponse>;
    /**
     * DeleteRobot deletes a robot
     *
     * @generated from protobuf rpc: DeleteRobot(viam.app.v1.DeleteRobotRequest) returns (viam.app.v1.DeleteRobotResponse);
     */
    deleteRobot(input: DeleteRobotRequest, options?: RpcOptions): UnaryCall<DeleteRobotRequest, DeleteRobotResponse>;
}
/**
 * @generated from protobuf service viam.app.v1.AppService
 */
export class AppServiceClient implements IAppServiceClient, ServiceInfo {
    typeName = AppService.typeName;
    methods = AppService.methods;
    options = AppService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListOrganizations(viam.app.v1.ListOrganizationsRequest) returns (viam.app.v1.ListOrganizationsResponse);
     */
    listOrganizations(input: ListOrganizationsRequest, options?: RpcOptions): UnaryCall<ListOrganizationsRequest, ListOrganizationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListOrganizationsRequest, ListOrganizationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListLocations(viam.app.v1.ListLocationsRequest) returns (viam.app.v1.ListLocationsResponse);
     */
    listLocations(input: ListLocationsRequest, options?: RpcOptions): UnaryCall<ListLocationsRequest, ListLocationsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListLocationsRequest, ListLocationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LocationAuth(viam.app.v1.LocationAuthRequest) returns (viam.app.v1.LocationAuthResponse);
     */
    locationAuth(input: LocationAuthRequest, options?: RpcOptions): UnaryCall<LocationAuthRequest, LocationAuthResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationAuthRequest, LocationAuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot by ID
     *
     * @generated from protobuf rpc: GetRobot(viam.app.v1.GetRobotRequest) returns (viam.app.v1.GetRobotResponse);
     */
    getRobot(input: GetRobotRequest, options?: RpcOptions): UnaryCall<GetRobotRequest, GetRobotResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRobotRequest, GetRobotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRobotParts(viam.app.v1.GetRobotPartsRequest) returns (viam.app.v1.GetRobotPartsResponse);
     */
    getRobotParts(input: GetRobotPartsRequest, options?: RpcOptions): UnaryCall<GetRobotPartsRequest, GetRobotPartsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRobotPartsRequest, GetRobotPartsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot part by ID
     *
     * @generated from protobuf rpc: GetRobotPart(viam.app.v1.GetRobotPartRequest) returns (viam.app.v1.GetRobotPartResponse);
     */
    getRobotPart(input: GetRobotPartRequest, options?: RpcOptions): UnaryCall<GetRobotPartRequest, GetRobotPartResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRobotPartRequest, GetRobotPartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRobotPartLogs(viam.app.v1.GetRobotPartLogsRequest) returns (viam.app.v1.GetRobotPartLogsResponse);
     */
    getRobotPartLogs(input: GetRobotPartLogsRequest, options?: RpcOptions): UnaryCall<GetRobotPartLogsRequest, GetRobotPartLogsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRobotPartLogsRequest, GetRobotPartLogsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TailRobotPartLogs(viam.app.v1.TailRobotPartLogsRequest) returns (stream viam.app.v1.TailRobotPartLogsResponse);
     */
    tailRobotPartLogs(input: TailRobotPartLogsRequest, options?: RpcOptions): ServerStreamingCall<TailRobotPartLogsRequest, TailRobotPartLogsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TailRobotPartLogsRequest, TailRobotPartLogsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot part histy by ID
     *
     * @generated from protobuf rpc: GetRobotPartHistory(viam.app.v1.GetRobotPartHistoryRequest) returns (viam.app.v1.GetRobotPartHistoryResponse);
     */
    getRobotPartHistory(input: GetRobotPartHistoryRequest, options?: RpcOptions): UnaryCall<GetRobotPartHistoryRequest, GetRobotPartHistoryResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRobotPartHistoryRequest, GetRobotPartHistoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Update a robot
     *
     * @generated from protobuf rpc: UpdateRobotPart(viam.app.v1.UpdateRobotPartRequest) returns (viam.app.v1.UpdateRobotPartResponse);
     */
    updateRobotPart(input: UpdateRobotPartRequest, options?: RpcOptions): UnaryCall<UpdateRobotPartRequest, UpdateRobotPartResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRobotPartRequest, UpdateRobotPartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Create a new robot part
     *
     * @generated from protobuf rpc: NewRobotPart(viam.app.v1.NewRobotPartRequest) returns (viam.app.v1.NewRobotPartResponse);
     */
    newRobotPart(input: NewRobotPartRequest, options?: RpcOptions): UnaryCall<NewRobotPartRequest, NewRobotPartResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewRobotPartRequest, NewRobotPartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Delete a robot part
     *
     * @generated from protobuf rpc: DeleteRobotPart(viam.app.v1.DeleteRobotPartRequest) returns (viam.app.v1.DeleteRobotPartResponse);
     */
    deleteRobotPart(input: DeleteRobotPartRequest, options?: RpcOptions): UnaryCall<DeleteRobotPartRequest, DeleteRobotPartResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRobotPartRequest, DeleteRobotPartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Marks the given part as the main part, and all the others as not
     *
     * @generated from protobuf rpc: MarkPartAsMain(viam.app.v1.MarkPartAsMainRequest) returns (viam.app.v1.MarkPartAsMainResponse);
     */
    markPartAsMain(input: MarkPartAsMainRequest, options?: RpcOptions): UnaryCall<MarkPartAsMainRequest, MarkPartAsMainResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<MarkPartAsMainRequest, MarkPartAsMainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Finds robots given a query
     *
     * @generated from protobuf rpc: FindRobots(viam.app.v1.FindRobotsRequest) returns (viam.app.v1.FindRobotsResponse);
     */
    findRobots(input: FindRobotsRequest, options?: RpcOptions): UnaryCall<FindRobotsRequest, FindRobotsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindRobotsRequest, FindRobotsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * NewRobot creates a new robot
     *
     * @generated from protobuf rpc: NewRobot(viam.app.v1.NewRobotRequest) returns (viam.app.v1.NewRobotResponse);
     */
    newRobot(input: NewRobotRequest, options?: RpcOptions): UnaryCall<NewRobotRequest, NewRobotResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewRobotRequest, NewRobotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateRobot updates a robot
     *
     * @generated from protobuf rpc: UpdateRobot(viam.app.v1.UpdateRobotRequest) returns (viam.app.v1.UpdateRobotResponse);
     */
    updateRobot(input: UpdateRobotRequest, options?: RpcOptions): UnaryCall<UpdateRobotRequest, UpdateRobotResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRobotRequest, UpdateRobotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteRobot deletes a robot
     *
     * @generated from protobuf rpc: DeleteRobot(viam.app.v1.DeleteRobotRequest) returns (viam.app.v1.DeleteRobotResponse);
     */
    deleteRobot(input: DeleteRobotRequest, options?: RpcOptions): UnaryCall<DeleteRobotRequest, DeleteRobotResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRobotRequest, DeleteRobotResponse>("unary", this._transport, method, opt, input);
    }
}
