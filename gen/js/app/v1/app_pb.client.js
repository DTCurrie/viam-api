// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "app/v1/app.proto" (package "viam.app.v1", syntax proto3)
// tslint:disable
import { AppService } from "./app_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service viam.app.v1.AppService
 */
export class AppServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = AppService.typeName;
        this.methods = AppService.methods;
        this.options = AppService.options;
    }
    /**
     * @generated from protobuf rpc: ListOrganizations(viam.app.v1.ListOrganizationsRequest) returns (viam.app.v1.ListOrganizationsResponse);
     */
    listOrganizations(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListLocations(viam.app.v1.ListLocationsRequest) returns (viam.app.v1.ListLocationsResponse);
     */
    listLocations(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LocationAuth(viam.app.v1.LocationAuthRequest) returns (viam.app.v1.LocationAuthResponse);
     */
    locationAuth(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot by ID
     *
     * @generated from protobuf rpc: GetRobot(viam.app.v1.GetRobotRequest) returns (viam.app.v1.GetRobotResponse);
     */
    getRobot(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRobotParts(viam.app.v1.GetRobotPartsRequest) returns (viam.app.v1.GetRobotPartsResponse);
     */
    getRobotParts(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot part by ID
     *
     * @generated from protobuf rpc: GetRobotPart(viam.app.v1.GetRobotPartRequest) returns (viam.app.v1.GetRobotPartResponse);
     */
    getRobotPart(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRobotPartLogs(viam.app.v1.GetRobotPartLogsRequest) returns (viam.app.v1.GetRobotPartLogsResponse);
     */
    getRobotPartLogs(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TailRobotPartLogs(viam.app.v1.TailRobotPartLogsRequest) returns (stream viam.app.v1.TailRobotPartLogsResponse);
     */
    tailRobotPartLogs(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get a specific robot part histy by ID
     *
     * @generated from protobuf rpc: GetRobotPartHistory(viam.app.v1.GetRobotPartHistoryRequest) returns (viam.app.v1.GetRobotPartHistoryResponse);
     */
    getRobotPartHistory(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Update a robot
     *
     * @generated from protobuf rpc: UpdateRobotPart(viam.app.v1.UpdateRobotPartRequest) returns (viam.app.v1.UpdateRobotPartResponse);
     */
    updateRobotPart(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Create a new robot part
     *
     * @generated from protobuf rpc: NewRobotPart(viam.app.v1.NewRobotPartRequest) returns (viam.app.v1.NewRobotPartResponse);
     */
    newRobotPart(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Delete a robot part
     *
     * @generated from protobuf rpc: DeleteRobotPart(viam.app.v1.DeleteRobotPartRequest) returns (viam.app.v1.DeleteRobotPartResponse);
     */
    deleteRobotPart(input, options) {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Marks the given part as the main part, and all the others as not
     *
     * @generated from protobuf rpc: MarkPartAsMain(viam.app.v1.MarkPartAsMainRequest) returns (viam.app.v1.MarkPartAsMainResponse);
     */
    markPartAsMain(input, options) {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Finds robots given a query
     *
     * @generated from protobuf rpc: FindRobots(viam.app.v1.FindRobotsRequest) returns (viam.app.v1.FindRobotsResponse);
     */
    findRobots(input, options) {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * NewRobot creates a new robot
     *
     * @generated from protobuf rpc: NewRobot(viam.app.v1.NewRobotRequest) returns (viam.app.v1.NewRobotResponse);
     */
    newRobot(input, options) {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateRobot updates a robot
     *
     * @generated from protobuf rpc: UpdateRobot(viam.app.v1.UpdateRobotRequest) returns (viam.app.v1.UpdateRobotResponse);
     */
    updateRobot(input, options) {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteRobot deletes a robot
     *
     * @generated from protobuf rpc: DeleteRobot(viam.app.v1.DeleteRobotRequest) returns (viam.app.v1.DeleteRobotResponse);
     */
    deleteRobot(input, options) {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
