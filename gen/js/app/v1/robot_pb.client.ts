// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "app/v1/robot.proto" (package "viam.app.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RobotService } from "./robot_pb";
import type { NeedsRestartResponse } from "./robot_pb";
import type { NeedsRestartRequest } from "./robot_pb";
import type { LogResponse } from "./robot_pb";
import type { LogRequest } from "./robot_pb";
import type { CertificateResponse } from "./robot_pb";
import type { CertificateRequest } from "./robot_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConfigResponse } from "./robot_pb";
import type { ConfigRequest } from "./robot_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * RobotService is used by robots to retrieve configs, report logs, etc...
 *
 * @generated from protobuf service viam.app.v1.RobotService
 */
export interface IRobotServiceClient {
    /**
     * Config requests the current robot config
     *
     * @generated from protobuf rpc: Config(viam.app.v1.ConfigRequest) returns (viam.app.v1.ConfigResponse);
     */
    config(input: ConfigRequest, options?: RpcOptions): UnaryCall<ConfigRequest, ConfigResponse>;
    /**
     * Certificate requests the current robot certificate
     *
     * @generated from protobuf rpc: Certificate(viam.app.v1.CertificateRequest) returns (viam.app.v1.CertificateResponse);
     */
    certificate(input: CertificateRequest, options?: RpcOptions): UnaryCall<CertificateRequest, CertificateResponse>;
    /**
     * Log insert log entries associated with the robot. Allows up to 1000 entries to be added in one request.
     *
     * @generated from protobuf rpc: Log(viam.app.v1.LogRequest) returns (viam.app.v1.LogResponse);
     */
    log(input: LogRequest, options?: RpcOptions): UnaryCall<LogRequest, LogResponse>;
    /**
     * NeedsRestart returns if the robot should restart and the interval it should check to restart.
     *
     * @generated from protobuf rpc: NeedsRestart(viam.app.v1.NeedsRestartRequest) returns (viam.app.v1.NeedsRestartResponse);
     */
    needsRestart(input: NeedsRestartRequest, options?: RpcOptions): UnaryCall<NeedsRestartRequest, NeedsRestartResponse>;
}
/**
 * RobotService is used by robots to retrieve configs, report logs, etc...
 *
 * @generated from protobuf service viam.app.v1.RobotService
 */
export class RobotServiceClient implements IRobotServiceClient, ServiceInfo {
    typeName = RobotService.typeName;
    methods = RobotService.methods;
    options = RobotService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Config requests the current robot config
     *
     * @generated from protobuf rpc: Config(viam.app.v1.ConfigRequest) returns (viam.app.v1.ConfigResponse);
     */
    config(input: ConfigRequest, options?: RpcOptions): UnaryCall<ConfigRequest, ConfigResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConfigRequest, ConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Certificate requests the current robot certificate
     *
     * @generated from protobuf rpc: Certificate(viam.app.v1.CertificateRequest) returns (viam.app.v1.CertificateResponse);
     */
    certificate(input: CertificateRequest, options?: RpcOptions): UnaryCall<CertificateRequest, CertificateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CertificateRequest, CertificateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Log insert log entries associated with the robot. Allows up to 1000 entries to be added in one request.
     *
     * @generated from protobuf rpc: Log(viam.app.v1.LogRequest) returns (viam.app.v1.LogResponse);
     */
    log(input: LogRequest, options?: RpcOptions): UnaryCall<LogRequest, LogResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogRequest, LogResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * NeedsRestart returns if the robot should restart and the interval it should check to restart.
     *
     * @generated from protobuf rpc: NeedsRestart(viam.app.v1.NeedsRestartRequest) returns (viam.app.v1.NeedsRestartResponse);
     */
    needsRestart(input: NeedsRestartRequest, options?: RpcOptions): UnaryCall<NeedsRestartRequest, NeedsRestartResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<NeedsRestartRequest, NeedsRestartResponse>("unary", this._transport, method, opt, input);
    }
}
