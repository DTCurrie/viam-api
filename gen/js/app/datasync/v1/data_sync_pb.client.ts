// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "app/datasync/v1/data_sync.proto" (package "viam.app.datasync.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataSyncService } from "./data_sync_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadResponse } from "./data_sync_pb";
import type { UploadRequest } from "./data_sync_pb";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service viam.app.datasync.v1.DataSyncService
 */
export interface IDataSyncServiceClient {
    /**
     * @generated from protobuf rpc: Upload(stream viam.app.datasync.v1.UploadRequest) returns (stream viam.app.datasync.v1.UploadResponse);
     */
    upload(options?: RpcOptions): DuplexStreamingCall<UploadRequest, UploadResponse>;
}
/**
 * @generated from protobuf service viam.app.datasync.v1.DataSyncService
 */
export class DataSyncServiceClient implements IDataSyncServiceClient, ServiceInfo {
    typeName = DataSyncService.typeName;
    methods = DataSyncService.methods;
    options = DataSyncService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Upload(stream viam.app.datasync.v1.UploadRequest) returns (stream viam.app.datasync.v1.UploadResponse);
     */
    upload(options?: RpcOptions): DuplexStreamingCall<UploadRequest, UploadResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadRequest, UploadResponse>("duplex", this._transport, method, opt);
    }
}
