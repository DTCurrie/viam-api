// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "app/data/v1/data.proto" (package "viam.app.data.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataService } from "./data_pb";
import type { BinaryDataByIDsResponse } from "./data_pb";
import type { BinaryDataByIDsRequest } from "./data_pb";
import type { BinaryDataByFilterResponse } from "./data_pb";
import type { BinaryDataByFilterRequest } from "./data_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TabularDataByFilterResponse } from "./data_pb";
import type { TabularDataByFilterRequest } from "./data_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * DataService is used to query robot data.
 *
 * @generated from protobuf service viam.app.data.v1.DataService
 */
export interface IDataServiceClient {
    /**
     * TabularDataByFilter queries tabular data and metadata based on given filters.
     *
     * @generated from protobuf rpc: TabularDataByFilter(viam.app.data.v1.TabularDataByFilterRequest) returns (viam.app.data.v1.TabularDataByFilterResponse);
     */
    tabularDataByFilter(input: TabularDataByFilterRequest, options?: RpcOptions): UnaryCall<TabularDataByFilterRequest, TabularDataByFilterResponse>;
    /**
     * BinaryDataByFilter queries binary data and metadata based on given filters.
     *
     * @generated from protobuf rpc: BinaryDataByFilter(viam.app.data.v1.BinaryDataByFilterRequest) returns (viam.app.data.v1.BinaryDataByFilterResponse);
     */
    binaryDataByFilter(input: BinaryDataByFilterRequest, options?: RpcOptions): UnaryCall<BinaryDataByFilterRequest, BinaryDataByFilterResponse>;
    /**
     * BinaryDataByIDs queries binary data and metadata based on given IDs.
     *
     * @generated from protobuf rpc: BinaryDataByIDs(viam.app.data.v1.BinaryDataByIDsRequest) returns (viam.app.data.v1.BinaryDataByIDsResponse);
     */
    binaryDataByIDs(input: BinaryDataByIDsRequest, options?: RpcOptions): UnaryCall<BinaryDataByIDsRequest, BinaryDataByIDsResponse>;
}
/**
 * DataService is used to query robot data.
 *
 * @generated from protobuf service viam.app.data.v1.DataService
 */
export class DataServiceClient implements IDataServiceClient, ServiceInfo {
    typeName = DataService.typeName;
    methods = DataService.methods;
    options = DataService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * TabularDataByFilter queries tabular data and metadata based on given filters.
     *
     * @generated from protobuf rpc: TabularDataByFilter(viam.app.data.v1.TabularDataByFilterRequest) returns (viam.app.data.v1.TabularDataByFilterResponse);
     */
    tabularDataByFilter(input: TabularDataByFilterRequest, options?: RpcOptions): UnaryCall<TabularDataByFilterRequest, TabularDataByFilterResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TabularDataByFilterRequest, TabularDataByFilterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BinaryDataByFilter queries binary data and metadata based on given filters.
     *
     * @generated from protobuf rpc: BinaryDataByFilter(viam.app.data.v1.BinaryDataByFilterRequest) returns (viam.app.data.v1.BinaryDataByFilterResponse);
     */
    binaryDataByFilter(input: BinaryDataByFilterRequest, options?: RpcOptions): UnaryCall<BinaryDataByFilterRequest, BinaryDataByFilterResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BinaryDataByFilterRequest, BinaryDataByFilterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BinaryDataByIDs queries binary data and metadata based on given IDs.
     *
     * @generated from protobuf rpc: BinaryDataByIDs(viam.app.data.v1.BinaryDataByIDsRequest) returns (viam.app.data.v1.BinaryDataByIDsResponse);
     */
    binaryDataByIDs(input: BinaryDataByIDsRequest, options?: RpcOptions): UnaryCall<BinaryDataByIDsRequest, BinaryDataByIDsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<BinaryDataByIDsRequest, BinaryDataByIDsResponse>("unary", this._transport, method, opt, input);
    }
}
