// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/base/v1/base.proto" (package "viam.component.base.v1", syntax proto3)
// tslint:disable
import { BaseService } from "./base_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service viam.component.base.v1.BaseService
 */
export class BaseServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = BaseService.typeName;
        this.methods = BaseService.methods;
        this.options = BaseService.options;
    }
    /**
     * MoveStraight moves a robot's base in a straight line by a given distance, expressed in millimeters
     * and a given speed, expressed in millimeters per second
     * This method blocks until completed or cancelled
     *
     * @generated from protobuf rpc: MoveStraight(viam.component.base.v1.MoveStraightRequest) returns (viam.component.base.v1.MoveStraightResponse);
     */
    moveStraight(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Spin spins a robot's base by an given angle, expressed in degrees, and a given
     * angular speed, expressed in degrees per second
     * This method blocks until completed or cancelled
     *
     * @generated from protobuf rpc: Spin(viam.component.base.v1.SpinRequest) returns (viam.component.base.v1.SpinResponse);
     */
    spin(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * SetPower sets the linear and angular power of a base
     * -1 -> 1 in terms of power for each direction
     *
     * @generated from protobuf rpc: SetPower(viam.component.base.v1.SetPowerRequest) returns (viam.component.base.v1.SetPowerResponse);
     */
    setPower(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * SetVelocity sets the linear and angular velocity of a base
     *
     * @generated from protobuf rpc: SetVelocity(viam.component.base.v1.SetVelocityRequest) returns (viam.component.base.v1.SetVelocityResponse);
     */
    setVelocity(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Stop stops a robot's base
     *
     * @generated from protobuf rpc: Stop(viam.component.base.v1.StopRequest) returns (viam.component.base.v1.StopResponse);
     */
    stop(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
