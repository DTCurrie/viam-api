// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "component/inputcontroller/v1/input_controller.proto" (package "viam.component.inputcontroller.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetControlsRequest
 */
export interface GetControlsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetControlsResponse
 */
export interface GetControlsResponse {
    /**
     * Returns a list of all the controls (buttons and axes) that are
     * available to a given Input Controller
     *
     * @generated from protobuf field: repeated string controls = 1;
     */
    controls: string[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetEventsRequest
 */
export interface GetEventsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetEventsResponse
 */
export interface GetEventsResponse {
    /**
     * Returns a list of the most recent event for each control on a given InputController. Effectively provides the current "state" of all
     * buttons/axes on a given input controller
     *
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.Event events = 1;
     */
    events: Event[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.TriggerEventRequest
 */
export interface TriggerEventRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
    /**
     * Digitally assert a given event
     *
     * @generated from protobuf field: viam.component.inputcontroller.v1.Event event = 2;
     */
    event?: Event;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.TriggerEventResponse
 */
export interface TriggerEventResponse {
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.Event
 */
export interface Event {
    /**
     * Timestamp of event
     *
     * @generated from protobuf field: google.protobuf.Timestamp time = 1;
     */
    time?: Timestamp;
    /**
     * An event type (eg: ButtonPress, ButtonRelease)
     *
     * @generated from protobuf field: string event = 2;
     */
    event: string;
    /**
     * A control, can be a button (eg: ButtonSouth) or an axis (eg: AbsoluteX)
     *
     * @generated from protobuf field: string control = 3;
     */
    control: string;
    /**
     * 0 or 1 for buttons, -1.0 to +1.0 for axes
     *
     * @generated from protobuf field: double value = 4;
     */
    value: number;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsRequest
 */
export interface StreamEventsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
    /**
     * A list of Events
     *
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.StreamEventsRequest.Events events = 2;
     */
    events: StreamEventsRequest_Events[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsRequest.Events
 */
export interface StreamEventsRequest_Events {
    /**
     * Name of a control (button or axis)
     *
     * @generated from protobuf field: string control = 1;
     */
    control: string;
    /**
     * Specify which event types to recieve events for
     * To Do (FA): Right now this can be an empty list, but we should error in this case as opening a stream with no messages is expensive
     *
     * @generated from protobuf field: repeated string events = 2;
     */
    events: string[];
    /**
     * Specify which event types to stop recieving events for
     * This can be an empty list
     *
     * @generated from protobuf field: repeated string cancelled_events = 3;
     */
    cancelledEvents: string[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsResponse
 */
export interface StreamEventsResponse {
    /**
     * Event for a controller
     *
     * @generated from protobuf field: viam.component.inputcontroller.v1.Event event = 1;
     */
    event?: Event;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.Status
 */
export interface Status {
    /**
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.Event events = 1;
     */
    events: Event[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetControlsRequest$Type extends MessageType<GetControlsRequest> {
    constructor() {
        super("viam.component.inputcontroller.v1.GetControlsRequest", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetControlsRequest
 */
export const GetControlsRequest = new GetControlsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetControlsResponse$Type extends MessageType<GetControlsResponse> {
    constructor() {
        super("viam.component.inputcontroller.v1.GetControlsResponse", [
            { no: 1, name: "controls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetControlsResponse
 */
export const GetControlsResponse = new GetControlsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEventsRequest$Type extends MessageType<GetEventsRequest> {
    constructor() {
        super("viam.component.inputcontroller.v1.GetEventsRequest", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetEventsRequest
 */
export const GetEventsRequest = new GetEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEventsResponse$Type extends MessageType<GetEventsResponse> {
    constructor() {
        super("viam.component.inputcontroller.v1.GetEventsResponse", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetEventsResponse
 */
export const GetEventsResponse = new GetEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerEventRequest$Type extends MessageType<TriggerEventRequest> {
    constructor() {
        super("viam.component.inputcontroller.v1.TriggerEventRequest", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event", kind: "message", T: () => Event }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.TriggerEventRequest
 */
export const TriggerEventRequest = new TriggerEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerEventResponse$Type extends MessageType<TriggerEventResponse> {
    constructor() {
        super("viam.component.inputcontroller.v1.TriggerEventResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.TriggerEventResponse
 */
export const TriggerEventResponse = new TriggerEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("viam.component.inputcontroller.v1.Event", [
            { no: 1, name: "time", kind: "message", T: () => Timestamp },
            { no: 2, name: "event", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "control", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventsRequest$Type extends MessageType<StreamEventsRequest> {
    constructor() {
        super("viam.component.inputcontroller.v1.StreamEventsRequest", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamEventsRequest_Events }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsRequest
 */
export const StreamEventsRequest = new StreamEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventsRequest_Events$Type extends MessageType<StreamEventsRequest_Events> {
    constructor() {
        super("viam.component.inputcontroller.v1.StreamEventsRequest.Events", [
            { no: 1, name: "control", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "events", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cancelled_events", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsRequest.Events
 */
export const StreamEventsRequest_Events = new StreamEventsRequest_Events$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventsResponse$Type extends MessageType<StreamEventsResponse> {
    constructor() {
        super("viam.component.inputcontroller.v1.StreamEventsResponse", [
            { no: 1, name: "event", kind: "message", T: () => Event }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsResponse
 */
export const StreamEventsResponse = new StreamEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("viam.component.inputcontroller.v1.Status", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.Status
 */
export const Status = new Status$Type();
/**
 * @generated ServiceType for protobuf service viam.component.inputcontroller.v1.InputControllerService
 */
export const InputControllerService = new ServiceType("viam.component.inputcontroller.v1.InputControllerService", [
    { name: "GetControls", options: { "google.api.http": { get: "/viam/api/v1/component/input/{controller}/controls" } }, I: GetControlsRequest, O: GetControlsResponse },
    { name: "GetEvents", options: { "google.api.http": { get: "/viam/api/v1/component/input/{controller}/events" } }, I: GetEventsRequest, O: GetEventsResponse },
    { name: "StreamEvents", serverStreaming: true, options: { "google.api.http": { get: "/viam/api/v1/component/input/{controller}/event_stream" } }, I: StreamEventsRequest, O: StreamEventsResponse },
    { name: "TriggerEvent", options: { "google.api.http": { post: "/viam/api/v1/component/input/{controller}/event" } }, I: TriggerEventRequest, O: TriggerEventResponse }
]);
