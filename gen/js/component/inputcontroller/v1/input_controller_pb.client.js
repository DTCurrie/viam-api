// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/inputcontroller/v1/input_controller.proto" (package "viam.component.inputcontroller.v1", syntax proto3)
// tslint:disable
import { InputControllerService } from "./input_controller_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * InputControllerService servicestains all input controller associated with a robot
 *
 * @generated from protobuf service viam.component.inputcontroller.v1.InputControllerService
 */
export class InputControllerServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = InputControllerService.typeName;
        this.methods = InputControllerService.methods;
        this.options = InputControllerService.options;
    }
    /**
     * GetControls returns a list of GetControls provided by the Controller
     *
     * @generated from protobuf rpc: GetControls(viam.component.inputcontroller.v1.GetControlsRequest) returns (viam.component.inputcontroller.v1.GetControlsResponse);
     */
    getControls(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetEvents returns a list of events representing the last event on each control of a give Input Controller
     *
     * @generated from protobuf rpc: GetEvents(viam.component.inputcontroller.v1.GetEventsRequest) returns (viam.component.inputcontroller.v1.GetEventsResponse);
     */
    getEvents(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
     *
     * @generated from protobuf rpc: StreamEvents(viam.component.inputcontroller.v1.StreamEventsRequest) returns (stream viam.component.inputcontroller.v1.StreamEventsResponse);
     */
    streamEvents(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
     * like button presses or axis movements
     *
     * @generated from protobuf rpc: TriggerEvent(viam.component.inputcontroller.v1.TriggerEventRequest) returns (viam.component.inputcontroller.v1.TriggerEventResponse);
     */
    triggerEvent(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
