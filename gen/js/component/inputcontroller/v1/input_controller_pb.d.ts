// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/inputcontroller/v1/input_controller.proto" (package "viam.component.inputcontroller.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetControlsRequest
 */
export interface GetControlsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetControlsResponse
 */
export interface GetControlsResponse {
    /**
     * Returns a list of all the controls (buttons and axes) that are
     * available to a given Input Controller
     *
     * @generated from protobuf field: repeated string controls = 1;
     */
    controls: string[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetEventsRequest
 */
export interface GetEventsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.GetEventsResponse
 */
export interface GetEventsResponse {
    /**
     * Returns a list of the most recent event for each control on a given InputController. Effectively provides the current "state" of all
     * buttons/axes on a given input controller
     *
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.Event events = 1;
     */
    events: Event[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.TriggerEventRequest
 */
export interface TriggerEventRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
    /**
     * Digitally assert a given event
     *
     * @generated from protobuf field: viam.component.inputcontroller.v1.Event event = 2;
     */
    event?: Event;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.TriggerEventResponse
 */
export interface TriggerEventResponse {
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.Event
 */
export interface Event {
    /**
     * Timestamp of event
     *
     * @generated from protobuf field: google.protobuf.Timestamp time = 1;
     */
    time?: Timestamp;
    /**
     * An event type (eg: ButtonPress, ButtonRelease)
     *
     * @generated from protobuf field: string event = 2;
     */
    event: string;
    /**
     * A control, can be a button (eg: ButtonSouth) or an axis (eg: AbsoluteX)
     *
     * @generated from protobuf field: string control = 3;
     */
    control: string;
    /**
     * 0 or 1 for buttons, -1.0 to +1.0 for axes
     *
     * @generated from protobuf field: double value = 4;
     */
    value: number;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsRequest
 */
export interface StreamEventsRequest {
    /**
     * Name of an input controller
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
    /**
     * A list of Events
     *
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.StreamEventsRequest.Events events = 2;
     */
    events: StreamEventsRequest_Events[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsRequest.Events
 */
export interface StreamEventsRequest_Events {
    /**
     * Name of a control (button or axis)
     *
     * @generated from protobuf field: string control = 1;
     */
    control: string;
    /**
     * Specify which event types to recieve events for
     * To Do (FA): Right now this can be an empty list, but we should error in this case as opening a stream with no messages is expensive
     *
     * @generated from protobuf field: repeated string events = 2;
     */
    events: string[];
    /**
     * Specify which event types to stop recieving events for
     * This can be an empty list
     *
     * @generated from protobuf field: repeated string cancelled_events = 3;
     */
    cancelledEvents: string[];
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.StreamEventsResponse
 */
export interface StreamEventsResponse {
    /**
     * Event for a controller
     *
     * @generated from protobuf field: viam.component.inputcontroller.v1.Event event = 1;
     */
    event?: Event;
}
/**
 * @generated from protobuf message viam.component.inputcontroller.v1.Status
 */
export interface Status {
    /**
     * @generated from protobuf field: repeated viam.component.inputcontroller.v1.Event events = 1;
     */
    events: Event[];
}
declare class GetControlsRequest$Type extends MessageType<GetControlsRequest> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetControlsRequest
 */
export declare const GetControlsRequest: GetControlsRequest$Type;
declare class GetControlsResponse$Type extends MessageType<GetControlsResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetControlsResponse
 */
export declare const GetControlsResponse: GetControlsResponse$Type;
declare class GetEventsRequest$Type extends MessageType<GetEventsRequest> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetEventsRequest
 */
export declare const GetEventsRequest: GetEventsRequest$Type;
declare class GetEventsResponse$Type extends MessageType<GetEventsResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.GetEventsResponse
 */
export declare const GetEventsResponse: GetEventsResponse$Type;
declare class TriggerEventRequest$Type extends MessageType<TriggerEventRequest> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.TriggerEventRequest
 */
export declare const TriggerEventRequest: TriggerEventRequest$Type;
declare class TriggerEventResponse$Type extends MessageType<TriggerEventResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.TriggerEventResponse
 */
export declare const TriggerEventResponse: TriggerEventResponse$Type;
declare class Event$Type extends MessageType<Event> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.Event
 */
export declare const Event: Event$Type;
declare class StreamEventsRequest$Type extends MessageType<StreamEventsRequest> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsRequest
 */
export declare const StreamEventsRequest: StreamEventsRequest$Type;
declare class StreamEventsRequest_Events$Type extends MessageType<StreamEventsRequest_Events> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsRequest.Events
 */
export declare const StreamEventsRequest_Events: StreamEventsRequest_Events$Type;
declare class StreamEventsResponse$Type extends MessageType<StreamEventsResponse> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.StreamEventsResponse
 */
export declare const StreamEventsResponse: StreamEventsResponse$Type;
declare class Status$Type extends MessageType<Status> {
    constructor();
}
/**
 * @generated MessageType for protobuf message viam.component.inputcontroller.v1.Status
 */
export declare const Status: Status$Type;
/**
 * @generated ServiceType for protobuf service viam.component.inputcontroller.v1.InputControllerService
 */
export declare const InputControllerService: any;
export {};
