// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "component/board/v1/board.proto" (package "viam.component.board.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BoardService } from "./board_pb";
import type { GetDigitalInterruptValueResponse } from "./board_pb";
import type { GetDigitalInterruptValueRequest } from "./board_pb";
import type { ReadAnalogReaderResponse } from "./board_pb";
import type { ReadAnalogReaderRequest } from "./board_pb";
import type { SetPWMFrequencyResponse } from "./board_pb";
import type { SetPWMFrequencyRequest } from "./board_pb";
import type { PWMFrequencyResponse } from "./board_pb";
import type { PWMFrequencyRequest } from "./board_pb";
import type { SetPWMResponse } from "./board_pb";
import type { SetPWMRequest } from "./board_pb";
import type { PWMResponse } from "./board_pb";
import type { PWMRequest } from "./board_pb";
import type { GetGPIOResponse } from "./board_pb";
import type { GetGPIORequest } from "./board_pb";
import type { SetGPIOResponse } from "./board_pb";
import type { SetGPIORequest } from "./board_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StatusResponse } from "./board_pb";
import type { StatusRequest } from "./board_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * BoardService services all Boards associated with a robot
 *
 * @generated from protobuf service viam.component.board.v1.BoardService
 */
export interface IBoardServiceClient {
    /**
     * @generated from protobuf rpc: Status(viam.component.board.v1.StatusRequest) returns (viam.component.board.v1.StatusResponse);
     */
    status(input: StatusRequest, options?: RpcOptions): UnaryCall<StatusRequest, StatusResponse>;
    /**
     * @generated from protobuf rpc: SetGPIO(viam.component.board.v1.SetGPIORequest) returns (viam.component.board.v1.SetGPIOResponse);
     */
    setGPIO(input: SetGPIORequest, options?: RpcOptions): UnaryCall<SetGPIORequest, SetGPIOResponse>;
    /**
     * GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: GetGPIO(viam.component.board.v1.GetGPIORequest) returns (viam.component.board.v1.GetGPIOResponse);
     */
    getGPIO(input: GetGPIORequest, options?: RpcOptions): UnaryCall<GetGPIORequest, GetGPIOResponse>;
    /**
     * PWM gets the duty cycle of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: PWM(viam.component.board.v1.PWMRequest) returns (viam.component.board.v1.PWMResponse);
     */
    pWM(input: PWMRequest, options?: RpcOptions): UnaryCall<PWMRequest, PWMResponse>;
    /**
     * SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
     *
     * @generated from protobuf rpc: SetPWM(viam.component.board.v1.SetPWMRequest) returns (viam.component.board.v1.SetPWMResponse);
     */
    setPWM(input: SetPWMRequest, options?: RpcOptions): UnaryCall<SetPWMRequest, SetPWMResponse>;
    /**
     * PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: PWMFrequency(viam.component.board.v1.PWMFrequencyRequest) returns (viam.component.board.v1.PWMFrequencyResponse);
     */
    pWMFrequency(input: PWMFrequencyRequest, options?: RpcOptions): UnaryCall<PWMFrequencyRequest, PWMFrequencyResponse>;
    /**
     * SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
     *
     * @generated from protobuf rpc: SetPWMFrequency(viam.component.board.v1.SetPWMFrequencyRequest) returns (viam.component.board.v1.SetPWMFrequencyResponse);
     */
    setPWMFrequency(input: SetPWMFrequencyRequest, options?: RpcOptions): UnaryCall<SetPWMFrequencyRequest, SetPWMFrequencyResponse>;
    // Analog Reader

    /**
     * ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
     *
     * @generated from protobuf rpc: ReadAnalogReader(viam.component.board.v1.ReadAnalogReaderRequest) returns (viam.component.board.v1.ReadAnalogReaderResponse);
     */
    readAnalogReader(input: ReadAnalogReaderRequest, options?: RpcOptions): UnaryCall<ReadAnalogReaderRequest, ReadAnalogReaderResponse>;
    // Digital Interrupt

    /**
     * GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
     *
     * @generated from protobuf rpc: GetDigitalInterruptValue(viam.component.board.v1.GetDigitalInterruptValueRequest) returns (viam.component.board.v1.GetDigitalInterruptValueResponse);
     */
    getDigitalInterruptValue(input: GetDigitalInterruptValueRequest, options?: RpcOptions): UnaryCall<GetDigitalInterruptValueRequest, GetDigitalInterruptValueResponse>;
}
/**
 * BoardService services all Boards associated with a robot
 *
 * @generated from protobuf service viam.component.board.v1.BoardService
 */
export class BoardServiceClient implements IBoardServiceClient, ServiceInfo {
    typeName = BoardService.typeName;
    methods = BoardService.methods;
    options = BoardService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Status(viam.component.board.v1.StatusRequest) returns (viam.component.board.v1.StatusResponse);
     */
    status(input: StatusRequest, options?: RpcOptions): UnaryCall<StatusRequest, StatusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StatusRequest, StatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetGPIO(viam.component.board.v1.SetGPIORequest) returns (viam.component.board.v1.SetGPIOResponse);
     */
    setGPIO(input: SetGPIORequest, options?: RpcOptions): UnaryCall<SetGPIORequest, SetGPIOResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetGPIORequest, SetGPIOResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: GetGPIO(viam.component.board.v1.GetGPIORequest) returns (viam.component.board.v1.GetGPIOResponse);
     */
    getGPIO(input: GetGPIORequest, options?: RpcOptions): UnaryCall<GetGPIORequest, GetGPIOResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGPIORequest, GetGPIOResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PWM gets the duty cycle of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: PWM(viam.component.board.v1.PWMRequest) returns (viam.component.board.v1.PWMResponse);
     */
    pWM(input: PWMRequest, options?: RpcOptions): UnaryCall<PWMRequest, PWMResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PWMRequest, PWMResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
     *
     * @generated from protobuf rpc: SetPWM(viam.component.board.v1.SetPWMRequest) returns (viam.component.board.v1.SetPWMResponse);
     */
    setPWM(input: SetPWMRequest, options?: RpcOptions): UnaryCall<SetPWMRequest, SetPWMResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPWMRequest, SetPWMResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
     *
     * @generated from protobuf rpc: PWMFrequency(viam.component.board.v1.PWMFrequencyRequest) returns (viam.component.board.v1.PWMFrequencyResponse);
     */
    pWMFrequency(input: PWMFrequencyRequest, options?: RpcOptions): UnaryCall<PWMFrequencyRequest, PWMFrequencyResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PWMFrequencyRequest, PWMFrequencyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
     *
     * @generated from protobuf rpc: SetPWMFrequency(viam.component.board.v1.SetPWMFrequencyRequest) returns (viam.component.board.v1.SetPWMFrequencyResponse);
     */
    setPWMFrequency(input: SetPWMFrequencyRequest, options?: RpcOptions): UnaryCall<SetPWMFrequencyRequest, SetPWMFrequencyResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPWMFrequencyRequest, SetPWMFrequencyResponse>("unary", this._transport, method, opt, input);
    }
    // Analog Reader

    /**
     * ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
     *
     * @generated from protobuf rpc: ReadAnalogReader(viam.component.board.v1.ReadAnalogReaderRequest) returns (viam.component.board.v1.ReadAnalogReaderResponse);
     */
    readAnalogReader(input: ReadAnalogReaderRequest, options?: RpcOptions): UnaryCall<ReadAnalogReaderRequest, ReadAnalogReaderResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadAnalogReaderRequest, ReadAnalogReaderResponse>("unary", this._transport, method, opt, input);
    }
    // Digital Interrupt

    /**
     * GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
     *
     * @generated from protobuf rpc: GetDigitalInterruptValue(viam.component.board.v1.GetDigitalInterruptValueRequest) returns (viam.component.board.v1.GetDigitalInterruptValueResponse);
     */
    getDigitalInterruptValue(input: GetDigitalInterruptValueRequest, options?: RpcOptions): UnaryCall<GetDigitalInterruptValueRequest, GetDigitalInterruptValueResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDigitalInterruptValueRequest, GetDigitalInterruptValueResponse>("unary", this._transport, method, opt, input);
    }
}
