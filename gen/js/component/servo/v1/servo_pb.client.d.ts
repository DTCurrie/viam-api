// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/servo/v1/servo.proto" (package "viam.component.servo.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { StopResponse } from "./servo_pb";
import type { StopRequest } from "./servo_pb";
import type { GetPositionResponse } from "./servo_pb";
import type { GetPositionRequest } from "./servo_pb";
import type { MoveResponse } from "./servo_pb";
import type { MoveRequest } from "./servo_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A ServoService maintains all servos associated with a robot
 *
 * @generated from protobuf service viam.component.servo.v1.ServoService
 */
export interface IServoServiceClient {
    /**
     * Move requests the servo of the underlying robot to move.
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: Move(viam.component.servo.v1.MoveRequest) returns (viam.component.servo.v1.MoveResponse);
     */
    move(input: MoveRequest, options?: RpcOptions): UnaryCall<MoveRequest, MoveResponse>;
    /**
     * GetPosition returns the current set angle (degrees) of the servo of the underlying robot.
     *
     * @generated from protobuf rpc: GetPosition(viam.component.servo.v1.GetPositionRequest) returns (viam.component.servo.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * Stop stops a robot's servo
     *
     * @generated from protobuf rpc: Stop(viam.component.servo.v1.StopRequest) returns (viam.component.servo.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
/**
 * A ServoService maintains all servos associated with a robot
 *
 * @generated from protobuf service viam.component.servo.v1.ServoService
 */
export declare class ServoServiceClient implements IServoServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * Move requests the servo of the underlying robot to move.
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: Move(viam.component.servo.v1.MoveRequest) returns (viam.component.servo.v1.MoveResponse);
     */
    move(input: MoveRequest, options?: RpcOptions): UnaryCall<MoveRequest, MoveResponse>;
    /**
     * GetPosition returns the current set angle (degrees) of the servo of the underlying robot.
     *
     * @generated from protobuf rpc: GetPosition(viam.component.servo.v1.GetPositionRequest) returns (viam.component.servo.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * Stop stops a robot's servo
     *
     * @generated from protobuf rpc: Stop(viam.component.servo.v1.StopRequest) returns (viam.component.servo.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
