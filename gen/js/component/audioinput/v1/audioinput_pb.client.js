// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/audioinput/v1/audioinput.proto" (package "viam.component.audioinput.v1", syntax proto3)
// tslint:disable
import { AudioInputService } from "./audioinput_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * An AudioInputService services all audio inputs associated with a robot
 *
 * @generated from protobuf service viam.component.audioinput.v1.AudioInputService
 */
export class AudioInputServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = AudioInputService.typeName;
        this.methods = AudioInputService.methods;
        this.options = AudioInputService.options;
    }
    /**
     * Chunks returns audio chunks forever from an audio input of the underlying robot.
     *
     * @generated from protobuf rpc: Chunks(viam.component.audioinput.v1.ChunksRequest) returns (stream viam.component.audioinput.v1.ChunksResponse);
     */
    chunks(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Properties returns properties of an audio input of the underlying robot.
     *
     * @generated from protobuf rpc: Properties(viam.component.audioinput.v1.PropertiesRequest) returns (viam.component.audioinput.v1.PropertiesResponse);
     */
    properties(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Record records audio from an audio input of the underlying robot
     * to an HTTP response. A specific MIME type cannot be requested and may not necessarily
     * be the same one returned each time.
     *
     * @generated from protobuf rpc: Record(viam.component.audioinput.v1.RecordRequest) returns (google.api.HttpBody);
     */
    record(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
