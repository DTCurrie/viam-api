// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "component/arm/v1/arm.proto" (package "viam.component.arm.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ArmService } from "./arm_pb";
import type { StopResponse } from "./arm_pb";
import type { StopRequest } from "./arm_pb";
import type { MoveToJointPositionsResponse } from "./arm_pb";
import type { MoveToJointPositionsRequest } from "./arm_pb";
import type { GetJointPositionsResponse } from "./arm_pb";
import type { GetJointPositionsRequest } from "./arm_pb";
import type { MoveToPositionResponse } from "./arm_pb";
import type { MoveToPositionRequest } from "./arm_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetEndPositionResponse } from "./arm_pb";
import type { GetEndPositionRequest } from "./arm_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * An ArmService services all arms associated with a robot
 *
 * @generated from protobuf service viam.component.arm.v1.ArmService
 */
export interface IArmServiceClient {
    /**
     * GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
     *
     * @generated from protobuf rpc: GetEndPosition(viam.component.arm.v1.GetEndPositionRequest) returns (viam.component.arm.v1.GetEndPositionResponse);
     */
    getEndPosition(input: GetEndPositionRequest, options?: RpcOptions): UnaryCall<GetEndPositionRequest, GetEndPositionResponse>;
    /**
     * MoveToPosition moves the mount point of the robot's end effector to the requested position.
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: MoveToPosition(viam.component.arm.v1.MoveToPositionRequest) returns (viam.component.arm.v1.MoveToPositionResponse);
     */
    moveToPosition(input: MoveToPositionRequest, options?: RpcOptions): UnaryCall<MoveToPositionRequest, MoveToPositionResponse>;
    /**
     * GetJointPositions lists the joint positions (in degrees) of every joint on a robot
     *
     * @generated from protobuf rpc: GetJointPositions(viam.component.arm.v1.GetJointPositionsRequest) returns (viam.component.arm.v1.GetJointPositionsResponse);
     */
    getJointPositions(input: GetJointPositionsRequest, options?: RpcOptions): UnaryCall<GetJointPositionsRequest, GetJointPositionsResponse>;
    /**
     * MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: MoveToJointPositions(viam.component.arm.v1.MoveToJointPositionsRequest) returns (viam.component.arm.v1.MoveToJointPositionsResponse);
     */
    moveToJointPositions(input: MoveToJointPositionsRequest, options?: RpcOptions): UnaryCall<MoveToJointPositionsRequest, MoveToJointPositionsResponse>;
    /**
     * Stop stops a robot's arm
     *
     * @generated from protobuf rpc: Stop(viam.component.arm.v1.StopRequest) returns (viam.component.arm.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
/**
 * An ArmService services all arms associated with a robot
 *
 * @generated from protobuf service viam.component.arm.v1.ArmService
 */
export class ArmServiceClient implements IArmServiceClient, ServiceInfo {
    typeName = ArmService.typeName;
    methods = ArmService.methods;
    options = ArmService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
     *
     * @generated from protobuf rpc: GetEndPosition(viam.component.arm.v1.GetEndPositionRequest) returns (viam.component.arm.v1.GetEndPositionResponse);
     */
    getEndPosition(input: GetEndPositionRequest, options?: RpcOptions): UnaryCall<GetEndPositionRequest, GetEndPositionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEndPositionRequest, GetEndPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * MoveToPosition moves the mount point of the robot's end effector to the requested position.
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: MoveToPosition(viam.component.arm.v1.MoveToPositionRequest) returns (viam.component.arm.v1.MoveToPositionResponse);
     */
    moveToPosition(input: MoveToPositionRequest, options?: RpcOptions): UnaryCall<MoveToPositionRequest, MoveToPositionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveToPositionRequest, MoveToPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetJointPositions lists the joint positions (in degrees) of every joint on a robot
     *
     * @generated from protobuf rpc: GetJointPositions(viam.component.arm.v1.GetJointPositionsRequest) returns (viam.component.arm.v1.GetJointPositionsResponse);
     */
    getJointPositions(input: GetJointPositionsRequest, options?: RpcOptions): UnaryCall<GetJointPositionsRequest, GetJointPositionsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetJointPositionsRequest, GetJointPositionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
     * This will block until done or a new operation cancels this one
     *
     * @generated from protobuf rpc: MoveToJointPositions(viam.component.arm.v1.MoveToJointPositionsRequest) returns (viam.component.arm.v1.MoveToJointPositionsResponse);
     */
    moveToJointPositions(input: MoveToJointPositionsRequest, options?: RpcOptions): UnaryCall<MoveToJointPositionsRequest, MoveToJointPositionsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveToJointPositionsRequest, MoveToJointPositionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop stops a robot's arm
     *
     * @generated from protobuf rpc: Stop(viam.component.arm.v1.StopRequest) returns (viam.component.arm.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
}
