// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "component/movementsensor/v1/movementsensor.proto" (package "viam.component.movementsensor.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MovementSensorService } from "./movementsensor_pb";
import type { GetAccuracyResponse } from "./movementsensor_pb";
import type { GetAccuracyRequest } from "./movementsensor_pb";
import type { GetPropertiesResponse } from "./movementsensor_pb";
import type { GetPropertiesRequest } from "./movementsensor_pb";
import type { GetPositionResponse } from "./movementsensor_pb";
import type { GetPositionRequest } from "./movementsensor_pb";
import type { GetOrientationResponse } from "./movementsensor_pb";
import type { GetOrientationRequest } from "./movementsensor_pb";
import type { GetCompassHeadingResponse } from "./movementsensor_pb";
import type { GetCompassHeadingRequest } from "./movementsensor_pb";
import type { GetAngularVelocityResponse } from "./movementsensor_pb";
import type { GetAngularVelocityRequest } from "./movementsensor_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetLinearVelocityResponse } from "./movementsensor_pb";
import type { GetLinearVelocityRequest } from "./movementsensor_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service viam.component.movementsensor.v1.MovementSensorService
 */
export interface IMovementSensorServiceClient {
    /**
     * @generated from protobuf rpc: GetLinearVelocity(viam.component.movementsensor.v1.GetLinearVelocityRequest) returns (viam.component.movementsensor.v1.GetLinearVelocityResponse);
     */
    getLinearVelocity(input: GetLinearVelocityRequest, options?: RpcOptions): UnaryCall<GetLinearVelocityRequest, GetLinearVelocityResponse>;
    /**
     * @generated from protobuf rpc: GetAngularVelocity(viam.component.movementsensor.v1.GetAngularVelocityRequest) returns (viam.component.movementsensor.v1.GetAngularVelocityResponse);
     */
    getAngularVelocity(input: GetAngularVelocityRequest, options?: RpcOptions): UnaryCall<GetAngularVelocityRequest, GetAngularVelocityResponse>;
    /**
     * @generated from protobuf rpc: GetCompassHeading(viam.component.movementsensor.v1.GetCompassHeadingRequest) returns (viam.component.movementsensor.v1.GetCompassHeadingResponse);
     */
    getCompassHeading(input: GetCompassHeadingRequest, options?: RpcOptions): UnaryCall<GetCompassHeadingRequest, GetCompassHeadingResponse>;
    /**
     * @generated from protobuf rpc: GetOrientation(viam.component.movementsensor.v1.GetOrientationRequest) returns (viam.component.movementsensor.v1.GetOrientationResponse);
     */
    getOrientation(input: GetOrientationRequest, options?: RpcOptions): UnaryCall<GetOrientationRequest, GetOrientationResponse>;
    /**
     * @generated from protobuf rpc: GetPosition(viam.component.movementsensor.v1.GetPositionRequest) returns (viam.component.movementsensor.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * @generated from protobuf rpc: GetProperties(viam.component.movementsensor.v1.GetPropertiesRequest) returns (viam.component.movementsensor.v1.GetPropertiesResponse);
     */
    getProperties(input: GetPropertiesRequest, options?: RpcOptions): UnaryCall<GetPropertiesRequest, GetPropertiesResponse>;
    /**
     * @generated from protobuf rpc: GetAccuracy(viam.component.movementsensor.v1.GetAccuracyRequest) returns (viam.component.movementsensor.v1.GetAccuracyResponse);
     */
    getAccuracy(input: GetAccuracyRequest, options?: RpcOptions): UnaryCall<GetAccuracyRequest, GetAccuracyResponse>;
}
/**
 * @generated from protobuf service viam.component.movementsensor.v1.MovementSensorService
 */
export class MovementSensorServiceClient implements IMovementSensorServiceClient, ServiceInfo {
    typeName = MovementSensorService.typeName;
    methods = MovementSensorService.methods;
    options = MovementSensorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetLinearVelocity(viam.component.movementsensor.v1.GetLinearVelocityRequest) returns (viam.component.movementsensor.v1.GetLinearVelocityResponse);
     */
    getLinearVelocity(input: GetLinearVelocityRequest, options?: RpcOptions): UnaryCall<GetLinearVelocityRequest, GetLinearVelocityResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLinearVelocityRequest, GetLinearVelocityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAngularVelocity(viam.component.movementsensor.v1.GetAngularVelocityRequest) returns (viam.component.movementsensor.v1.GetAngularVelocityResponse);
     */
    getAngularVelocity(input: GetAngularVelocityRequest, options?: RpcOptions): UnaryCall<GetAngularVelocityRequest, GetAngularVelocityResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAngularVelocityRequest, GetAngularVelocityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCompassHeading(viam.component.movementsensor.v1.GetCompassHeadingRequest) returns (viam.component.movementsensor.v1.GetCompassHeadingResponse);
     */
    getCompassHeading(input: GetCompassHeadingRequest, options?: RpcOptions): UnaryCall<GetCompassHeadingRequest, GetCompassHeadingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCompassHeadingRequest, GetCompassHeadingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOrientation(viam.component.movementsensor.v1.GetOrientationRequest) returns (viam.component.movementsensor.v1.GetOrientationResponse);
     */
    getOrientation(input: GetOrientationRequest, options?: RpcOptions): UnaryCall<GetOrientationRequest, GetOrientationResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOrientationRequest, GetOrientationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPosition(viam.component.movementsensor.v1.GetPositionRequest) returns (viam.component.movementsensor.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPositionRequest, GetPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProperties(viam.component.movementsensor.v1.GetPropertiesRequest) returns (viam.component.movementsensor.v1.GetPropertiesResponse);
     */
    getProperties(input: GetPropertiesRequest, options?: RpcOptions): UnaryCall<GetPropertiesRequest, GetPropertiesResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPropertiesRequest, GetPropertiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAccuracy(viam.component.movementsensor.v1.GetAccuracyRequest) returns (viam.component.movementsensor.v1.GetAccuracyResponse);
     */
    getAccuracy(input: GetAccuracyRequest, options?: RpcOptions): UnaryCall<GetAccuracyRequest, GetAccuracyResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAccuracyRequest, GetAccuracyResponse>("unary", this._transport, method, opt, input);
    }
}
