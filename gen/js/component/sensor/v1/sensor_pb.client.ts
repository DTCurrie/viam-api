// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "component/sensor/v1/sensor.proto" (package "viam.component.sensor.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SensorService } from "./sensor_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetReadingsResponse } from "./sensor_pb";
import type { GetReadingsRequest } from "./sensor_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * SensorService services all generic sensors associated with a robot
 *
 * @generated from protobuf service viam.component.sensor.v1.SensorService
 */
export interface ISensorServiceClient {
    /**
     * GetReadings returns the readings of a sensor of the underlying robot.
     *
     * @generated from protobuf rpc: GetReadings(viam.component.sensor.v1.GetReadingsRequest) returns (viam.component.sensor.v1.GetReadingsResponse);
     */
    getReadings(input: GetReadingsRequest, options?: RpcOptions): UnaryCall<GetReadingsRequest, GetReadingsResponse>;
}
/**
 * SensorService services all generic sensors associated with a robot
 *
 * @generated from protobuf service viam.component.sensor.v1.SensorService
 */
export class SensorServiceClient implements ISensorServiceClient, ServiceInfo {
    typeName = SensorService.typeName;
    methods = SensorService.methods;
    options = SensorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetReadings returns the readings of a sensor of the underlying robot.
     *
     * @generated from protobuf rpc: GetReadings(viam.component.sensor.v1.GetReadingsRequest) returns (viam.component.sensor.v1.GetReadingsResponse);
     */
    getReadings(input: GetReadingsRequest, options?: RpcOptions): UnaryCall<GetReadingsRequest, GetReadingsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetReadingsRequest, GetReadingsResponse>("unary", this._transport, method, opt, input);
    }
}
