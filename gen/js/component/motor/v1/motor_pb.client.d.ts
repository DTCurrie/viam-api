// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "component/motor/v1/motor.proto" (package "viam.component.motor.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { IsPoweredResponse } from "./motor_pb";
import type { IsPoweredRequest } from "./motor_pb";
import type { StopResponse } from "./motor_pb";
import type { StopRequest } from "./motor_pb";
import type { GetPropertiesResponse } from "./motor_pb";
import type { GetPropertiesRequest } from "./motor_pb";
import type { GetPositionResponse } from "./motor_pb";
import type { GetPositionRequest } from "./motor_pb";
import type { ResetZeroPositionResponse } from "./motor_pb";
import type { ResetZeroPositionRequest } from "./motor_pb";
import type { GoToResponse } from "./motor_pb";
import type { GoToRequest } from "./motor_pb";
import type { GoForResponse } from "./motor_pb";
import type { GoForRequest } from "./motor_pb";
import type { SetPowerResponse } from "./motor_pb";
import type { SetPowerRequest } from "./motor_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A MotorService maintains all motors associated with a robot
 *
 * @generated from protobuf service viam.component.motor.v1.MotorService
 */
export interface IMotorServiceClient {
    /**
     * SetPower sets the percentage of the motor's total power that should be employed
     * expressed a value between -1 and 1 where negative values indicate a backwards
     * direction and positive values a forward direction
     *
     * @generated from protobuf rpc: SetPower(viam.component.motor.v1.SetPowerRequest) returns (viam.component.motor.v1.SetPowerResponse);
     */
    setPower(input: SetPowerRequest, options?: RpcOptions): UnaryCall<SetPowerRequest, SetPowerResponse>;
    /**
     * GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
     * for a specified number of rotations relative to its starting position
     * This method will return an error if position reporting is not supported
     * If revolutions is 0, this will run the motor at rpm indefinitely
     * If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
     *
     * @generated from protobuf rpc: GoFor(viam.component.motor.v1.GoForRequest) returns (viam.component.motor.v1.GoForResponse);
     */
    goFor(input: GoForRequest, options?: RpcOptions): UnaryCall<GoForRequest, GoForResponse>;
    /**
     * GoTo requests the robot's motor to move to a specific position that
     * is relative to its home position at a specified speed which is expressed in RPM
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: GoTo(viam.component.motor.v1.GoToRequest) returns (viam.component.motor.v1.GoToResponse);
     */
    goTo(input: GoToRequest, options?: RpcOptions): UnaryCall<GoToRequest, GoToResponse>;
    /**
     * ResetZeroPosition sets the current position of the motor as the new zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: ResetZeroPosition(viam.component.motor.v1.ResetZeroPositionRequest) returns (viam.component.motor.v1.ResetZeroPositionResponse);
     */
    resetZeroPosition(input: ResetZeroPositionRequest, options?: RpcOptions): UnaryCall<ResetZeroPositionRequest, ResetZeroPositionResponse>;
    /**
     * Position reports the position of the robot's motor relative to its zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: GetPosition(viam.component.motor.v1.GetPositionRequest) returns (viam.component.motor.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * GetProperties returns a message of booleans indicating which optional features the robot's motor supports
     *
     * @generated from protobuf rpc: GetProperties(viam.component.motor.v1.GetPropertiesRequest) returns (viam.component.motor.v1.GetPropertiesResponse);
     */
    getProperties(input: GetPropertiesRequest, options?: RpcOptions): UnaryCall<GetPropertiesRequest, GetPropertiesResponse>;
    /**
     * @generated from protobuf rpc: Stop(viam.component.motor.v1.StopRequest) returns (viam.component.motor.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
    /**
     * IsPowered returns true if the robot's motor off
     * To Do (FA): This will be deprecated
     *
     * @generated from protobuf rpc: IsPowered(viam.component.motor.v1.IsPoweredRequest) returns (viam.component.motor.v1.IsPoweredResponse);
     */
    isPowered(input: IsPoweredRequest, options?: RpcOptions): UnaryCall<IsPoweredRequest, IsPoweredResponse>;
}
/**
 * A MotorService maintains all motors associated with a robot
 *
 * @generated from protobuf service viam.component.motor.v1.MotorService
 */
export declare class MotorServiceClient implements IMotorServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * SetPower sets the percentage of the motor's total power that should be employed
     * expressed a value between -1 and 1 where negative values indicate a backwards
     * direction and positive values a forward direction
     *
     * @generated from protobuf rpc: SetPower(viam.component.motor.v1.SetPowerRequest) returns (viam.component.motor.v1.SetPowerResponse);
     */
    setPower(input: SetPowerRequest, options?: RpcOptions): UnaryCall<SetPowerRequest, SetPowerResponse>;
    /**
     * GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
     * for a specified number of rotations relative to its starting position
     * This method will return an error if position reporting is not supported
     * If revolutions is 0, this will run the motor at rpm indefinitely
     * If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
     *
     * @generated from protobuf rpc: GoFor(viam.component.motor.v1.GoForRequest) returns (viam.component.motor.v1.GoForResponse);
     */
    goFor(input: GoForRequest, options?: RpcOptions): UnaryCall<GoForRequest, GoForResponse>;
    /**
     * GoTo requests the robot's motor to move to a specific position that
     * is relative to its home position at a specified speed which is expressed in RPM
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: GoTo(viam.component.motor.v1.GoToRequest) returns (viam.component.motor.v1.GoToResponse);
     */
    goTo(input: GoToRequest, options?: RpcOptions): UnaryCall<GoToRequest, GoToResponse>;
    /**
     * ResetZeroPosition sets the current position of the motor as the new zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: ResetZeroPosition(viam.component.motor.v1.ResetZeroPositionRequest) returns (viam.component.motor.v1.ResetZeroPositionResponse);
     */
    resetZeroPosition(input: ResetZeroPositionRequest, options?: RpcOptions): UnaryCall<ResetZeroPositionRequest, ResetZeroPositionResponse>;
    /**
     * Position reports the position of the robot's motor relative to its zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from protobuf rpc: GetPosition(viam.component.motor.v1.GetPositionRequest) returns (viam.component.motor.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * GetProperties returns a message of booleans indicating which optional features the robot's motor supports
     *
     * @generated from protobuf rpc: GetProperties(viam.component.motor.v1.GetPropertiesRequest) returns (viam.component.motor.v1.GetPropertiesResponse);
     */
    getProperties(input: GetPropertiesRequest, options?: RpcOptions): UnaryCall<GetPropertiesRequest, GetPropertiesResponse>;
    /**
     * @generated from protobuf rpc: Stop(viam.component.motor.v1.StopRequest) returns (viam.component.motor.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
    /**
     * IsPowered returns true if the robot's motor off
     * To Do (FA): This will be deprecated
     *
     * @generated from protobuf rpc: IsPowered(viam.component.motor.v1.IsPoweredRequest) returns (viam.component.motor.v1.IsPoweredResponse);
     */
    isPowered(input: IsPoweredRequest, options?: RpcOptions): UnaryCall<IsPoweredRequest, IsPoweredResponse>;
}
