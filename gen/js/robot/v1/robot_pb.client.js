// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,output_javascript
// @generated from protobuf file "robot/v1/robot.proto" (package "viam.robot.v1", syntax proto3)
// tslint:disable
import { RobotService } from "./robot_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
 *
 * @generated from protobuf service viam.robot.v1.RobotService
 */
export class RobotServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = RobotService.typeName;
        this.methods = RobotService.methods;
        this.options = RobotService.options;
    }
    /**
     * @generated from protobuf rpc: GetOperations(viam.robot.v1.GetOperationsRequest) returns (viam.robot.v1.GetOperationsResponse);
     */
    getOperations(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ResourceNames returns the list of all resources.
     *
     * @generated from protobuf rpc: ResourceNames(viam.robot.v1.ResourceNamesRequest) returns (viam.robot.v1.ResourceNamesResponse);
     */
    resourceNames(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ResourceRPCSubtypes returns the list of all resource types.
     *
     * @generated from protobuf rpc: ResourceRPCSubtypes(viam.robot.v1.ResourceRPCSubtypesRequest) returns (viam.robot.v1.ResourceRPCSubtypesResponse);
     */
    resourceRPCSubtypes(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CancelOperation(viam.robot.v1.CancelOperationRequest) returns (viam.robot.v1.CancelOperationResponse);
     */
    cancelOperation(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BlockForOperation(viam.robot.v1.BlockForOperationRequest) returns (viam.robot.v1.BlockForOperationResponse);
     */
    blockForOperation(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DiscoverComponents returns the list of discovered component configurations.
     *
     * @generated from protobuf rpc: DiscoverComponents(viam.robot.v1.DiscoverComponentsRequest) returns (viam.robot.v1.DiscoverComponentsResponse);
     */
    discoverComponents(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FrameSystemConfig(viam.robot.v1.FrameSystemConfigRequest) returns (viam.robot.v1.FrameSystemConfigResponse);
     */
    frameSystemConfig(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TransformPose(viam.robot.v1.TransformPoseRequest) returns (viam.robot.v1.TransformPoseResponse);
     */
    transformPose(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatus returns the list of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: GetStatus(viam.robot.v1.GetStatusRequest) returns (viam.robot.v1.GetStatusResponse);
     */
    getStatus(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: StreamStatus(viam.robot.v1.StreamStatusRequest) returns (stream viam.robot.v1.StreamStatusResponse);
     */
    streamStatus(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
     *
     * @generated from protobuf rpc: StopAll(viam.robot.v1.StopAllRequest) returns (viam.robot.v1.StopAllResponse);
     */
    stopAll(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
