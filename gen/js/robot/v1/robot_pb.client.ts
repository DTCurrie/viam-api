// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "robot/v1/robot.proto" (package "viam.robot.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RobotService } from "./robot_pb";
import type { StopAllResponse } from "./robot_pb";
import type { StopAllRequest } from "./robot_pb";
import type { StreamStatusResponse } from "./robot_pb";
import type { StreamStatusRequest } from "./robot_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetStatusResponse } from "./robot_pb";
import type { GetStatusRequest } from "./robot_pb";
import type { TransformPoseResponse } from "./robot_pb";
import type { TransformPoseRequest } from "./robot_pb";
import type { FrameSystemConfigResponse } from "./robot_pb";
import type { FrameSystemConfigRequest } from "./robot_pb";
import type { DiscoverComponentsResponse } from "./robot_pb";
import type { DiscoverComponentsRequest } from "./robot_pb";
import type { BlockForOperationResponse } from "./robot_pb";
import type { BlockForOperationRequest } from "./robot_pb";
import type { CancelOperationResponse } from "./robot_pb";
import type { CancelOperationRequest } from "./robot_pb";
import type { ResourceRPCSubtypesResponse } from "./robot_pb";
import type { ResourceRPCSubtypesRequest } from "./robot_pb";
import type { ResourceNamesResponse } from "./robot_pb";
import type { ResourceNamesRequest } from "./robot_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetOperationsResponse } from "./robot_pb";
import type { GetOperationsRequest } from "./robot_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
 *
 * @generated from protobuf service viam.robot.v1.RobotService
 */
export interface IRobotServiceClient {
    /**
     * @generated from protobuf rpc: GetOperations(viam.robot.v1.GetOperationsRequest) returns (viam.robot.v1.GetOperationsResponse);
     */
    getOperations(input: GetOperationsRequest, options?: RpcOptions): UnaryCall<GetOperationsRequest, GetOperationsResponse>;
    /**
     * ResourceNames returns the list of all resources.
     *
     * @generated from protobuf rpc: ResourceNames(viam.robot.v1.ResourceNamesRequest) returns (viam.robot.v1.ResourceNamesResponse);
     */
    resourceNames(input: ResourceNamesRequest, options?: RpcOptions): UnaryCall<ResourceNamesRequest, ResourceNamesResponse>;
    /**
     * ResourceRPCSubtypes returns the list of all resource types.
     *
     * @generated from protobuf rpc: ResourceRPCSubtypes(viam.robot.v1.ResourceRPCSubtypesRequest) returns (viam.robot.v1.ResourceRPCSubtypesResponse);
     */
    resourceRPCSubtypes(input: ResourceRPCSubtypesRequest, options?: RpcOptions): UnaryCall<ResourceRPCSubtypesRequest, ResourceRPCSubtypesResponse>;
    /**
     * @generated from protobuf rpc: CancelOperation(viam.robot.v1.CancelOperationRequest) returns (viam.robot.v1.CancelOperationResponse);
     */
    cancelOperation(input: CancelOperationRequest, options?: RpcOptions): UnaryCall<CancelOperationRequest, CancelOperationResponse>;
    /**
     * @generated from protobuf rpc: BlockForOperation(viam.robot.v1.BlockForOperationRequest) returns (viam.robot.v1.BlockForOperationResponse);
     */
    blockForOperation(input: BlockForOperationRequest, options?: RpcOptions): UnaryCall<BlockForOperationRequest, BlockForOperationResponse>;
    /**
     * DiscoverComponents returns the list of discovered component configurations.
     *
     * @generated from protobuf rpc: DiscoverComponents(viam.robot.v1.DiscoverComponentsRequest) returns (viam.robot.v1.DiscoverComponentsResponse);
     */
    discoverComponents(input: DiscoverComponentsRequest, options?: RpcOptions): UnaryCall<DiscoverComponentsRequest, DiscoverComponentsResponse>;
    /**
     * @generated from protobuf rpc: FrameSystemConfig(viam.robot.v1.FrameSystemConfigRequest) returns (viam.robot.v1.FrameSystemConfigResponse);
     */
    frameSystemConfig(input: FrameSystemConfigRequest, options?: RpcOptions): UnaryCall<FrameSystemConfigRequest, FrameSystemConfigResponse>;
    /**
     * @generated from protobuf rpc: TransformPose(viam.robot.v1.TransformPoseRequest) returns (viam.robot.v1.TransformPoseResponse);
     */
    transformPose(input: TransformPoseRequest, options?: RpcOptions): UnaryCall<TransformPoseRequest, TransformPoseResponse>;
    /**
     * GetStatus returns the list of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: GetStatus(viam.robot.v1.GetStatusRequest) returns (viam.robot.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: StreamStatus(viam.robot.v1.StreamStatusRequest) returns (stream viam.robot.v1.StreamStatusResponse);
     */
    streamStatus(input: StreamStatusRequest, options?: RpcOptions): ServerStreamingCall<StreamStatusRequest, StreamStatusResponse>;
    /**
     * StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
     *
     * @generated from protobuf rpc: StopAll(viam.robot.v1.StopAllRequest) returns (viam.robot.v1.StopAllResponse);
     */
    stopAll(input: StopAllRequest, options?: RpcOptions): UnaryCall<StopAllRequest, StopAllResponse>;
}
/**
 * A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
 *
 * @generated from protobuf service viam.robot.v1.RobotService
 */
export class RobotServiceClient implements IRobotServiceClient, ServiceInfo {
    typeName = RobotService.typeName;
    methods = RobotService.methods;
    options = RobotService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOperations(viam.robot.v1.GetOperationsRequest) returns (viam.robot.v1.GetOperationsResponse);
     */
    getOperations(input: GetOperationsRequest, options?: RpcOptions): UnaryCall<GetOperationsRequest, GetOperationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOperationsRequest, GetOperationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ResourceNames returns the list of all resources.
     *
     * @generated from protobuf rpc: ResourceNames(viam.robot.v1.ResourceNamesRequest) returns (viam.robot.v1.ResourceNamesResponse);
     */
    resourceNames(input: ResourceNamesRequest, options?: RpcOptions): UnaryCall<ResourceNamesRequest, ResourceNamesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResourceNamesRequest, ResourceNamesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ResourceRPCSubtypes returns the list of all resource types.
     *
     * @generated from protobuf rpc: ResourceRPCSubtypes(viam.robot.v1.ResourceRPCSubtypesRequest) returns (viam.robot.v1.ResourceRPCSubtypesResponse);
     */
    resourceRPCSubtypes(input: ResourceRPCSubtypesRequest, options?: RpcOptions): UnaryCall<ResourceRPCSubtypesRequest, ResourceRPCSubtypesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResourceRPCSubtypesRequest, ResourceRPCSubtypesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CancelOperation(viam.robot.v1.CancelOperationRequest) returns (viam.robot.v1.CancelOperationResponse);
     */
    cancelOperation(input: CancelOperationRequest, options?: RpcOptions): UnaryCall<CancelOperationRequest, CancelOperationResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CancelOperationRequest, CancelOperationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BlockForOperation(viam.robot.v1.BlockForOperationRequest) returns (viam.robot.v1.BlockForOperationResponse);
     */
    blockForOperation(input: BlockForOperationRequest, options?: RpcOptions): UnaryCall<BlockForOperationRequest, BlockForOperationResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<BlockForOperationRequest, BlockForOperationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DiscoverComponents returns the list of discovered component configurations.
     *
     * @generated from protobuf rpc: DiscoverComponents(viam.robot.v1.DiscoverComponentsRequest) returns (viam.robot.v1.DiscoverComponentsResponse);
     */
    discoverComponents(input: DiscoverComponentsRequest, options?: RpcOptions): UnaryCall<DiscoverComponentsRequest, DiscoverComponentsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiscoverComponentsRequest, DiscoverComponentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FrameSystemConfig(viam.robot.v1.FrameSystemConfigRequest) returns (viam.robot.v1.FrameSystemConfigResponse);
     */
    frameSystemConfig(input: FrameSystemConfigRequest, options?: RpcOptions): UnaryCall<FrameSystemConfigRequest, FrameSystemConfigResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<FrameSystemConfigRequest, FrameSystemConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TransformPose(viam.robot.v1.TransformPoseRequest) returns (viam.robot.v1.TransformPoseResponse);
     */
    transformPose(input: TransformPoseRequest, options?: RpcOptions): UnaryCall<TransformPoseRequest, TransformPoseResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransformPoseRequest, TransformPoseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatus returns the list of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: GetStatus(viam.robot.v1.GetStatusRequest) returns (viam.robot.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
     *
     * @generated from protobuf rpc: StreamStatus(viam.robot.v1.StreamStatusRequest) returns (stream viam.robot.v1.StreamStatusResponse);
     */
    streamStatus(input: StreamStatusRequest, options?: RpcOptions): ServerStreamingCall<StreamStatusRequest, StreamStatusResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamStatusRequest, StreamStatusResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
     *
     * @generated from protobuf rpc: StopAll(viam.robot.v1.StopAllRequest) returns (viam.robot.v1.StopAllResponse);
     */
    stopAll(input: StopAllRequest, options?: RpcOptions): UnaryCall<StopAllRequest, StopAllResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopAllRequest, StopAllResponse>("unary", this._transport, method, opt, input);
    }
}
