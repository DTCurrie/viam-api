// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "common/v1/common.proto" (package "viam.common.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message viam.common.v1.ResourceName
 */
export interface ResourceName {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: string subtype = 3;
     */
    subtype: string;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
}
/**
 * @generated from protobuf message viam.common.v1.BoardStatus
 */
export interface BoardStatus {
    /**
     * @generated from protobuf field: map<string, viam.common.v1.AnalogStatus> analogs = 1;
     */
    analogs: {
        [key: string]: AnalogStatus;
    };
    /**
     * @generated from protobuf field: map<string, viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2;
     */
    digitalInterrupts: {
        [key: string]: DigitalInterruptStatus;
    };
}
/**
 * @generated from protobuf message viam.common.v1.AnalogStatus
 */
export interface AnalogStatus {
    /**
     * Current value of the analog reader of a robot's board
     *
     * @generated from protobuf field: int32 value = 1;
     */
    value: number;
}
/**
 * @generated from protobuf message viam.common.v1.DigitalInterruptStatus
 */
export interface DigitalInterruptStatus {
    /**
     * Current value of the digital interrupt of a robot's board
     *
     * @generated from protobuf field: int64 value = 1;
     */
    value: string;
}
/**
 * Pose is a combination of location and orientation.
 * Location is expressed as distance which is represented by x , y, z coordinates. Orientation is expressed as an orientation vector which
 * is represented by o_x, o_y, o_z and theta. The o_x, o_y, o_z coordinates represent the point on the cartesian unit sphere that the end of
 * the arm is pointing to (with the origin as reference). That unit vector forms an axis around which theta rotates. This means that
 * incrementing / decrementing theta will perform an inline rotation of the end effector.
 * Theta is defined as rotation between two planes: the first being defined by the origin, the point (0,0,1), and the rx, ry, rz point, and the
 * second being defined by the origin, the rx, ry, rz point and the local Z axis. Therefore, if theta is kept at zero as the north/south pole
 * is circled, the Roll will correct itself to remain in-line.
 *
 * @generated from protobuf message viam.common.v1.Pose
 */
export interface Pose {
    /**
     * millimeters from the origin
     *
     * @generated from protobuf field: double x = 1;
     */
    x: number;
    /**
     * millimeters from the origin
     *
     * @generated from protobuf field: double y = 2;
     */
    y: number;
    /**
     * millimeters from the origin
     *
     * @generated from protobuf field: double z = 3;
     */
    z: number;
    /**
     * z component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_x = 4;
     */
    oX: number;
    /**
     * x component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_y = 5;
     */
    oY: number;
    /**
     * y component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_z = 6;
     */
    oZ: number;
    /**
     * degrees
     *
     * @generated from protobuf field: double theta = 7;
     */
    theta: number;
}
/**
 * @generated from protobuf message viam.common.v1.Orientation
 */
export interface Orientation {
    /**
     * x component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_x = 1;
     */
    oX: number;
    /**
     * y component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_y = 2;
     */
    oY: number;
    /**
     * z component of a vector defining axis of rotation
     *
     * @generated from protobuf field: double o_z = 3;
     */
    oZ: number;
    /**
     * degrees
     *
     * @generated from protobuf field: double theta = 4;
     */
    theta: number;
}
/**
 * PoseInFrame contains a pose and the and the reference frame in which it was observed
 *
 * @generated from protobuf message viam.common.v1.PoseInFrame
 */
export interface PoseInFrame {
    /**
     * @generated from protobuf field: string reference_frame = 1;
     */
    referenceFrame: string;
    /**
     * @generated from protobuf field: viam.common.v1.Pose pose = 2;
     */
    pose?: Pose;
}
/**
 * @generated from protobuf message viam.common.v1.Vector3
 */
export interface Vector3 {
    /**
     * @generated from protobuf field: double x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: double z = 3;
     */
    z: number;
}
/**
 * @generated from protobuf message viam.common.v1.Sphere
 */
export interface Sphere {
    /**
     * @generated from protobuf field: double radius_mm = 1;
     */
    radiusMm: number;
}
/**
 * RectangularPrism contains a Vector3 field corresponding to the X, Y, Z dimensions of the prism in mms
 * These dimensions are with respect to the referenceframe in which the RectangularPrism is defined
 *
 * @generated from protobuf message viam.common.v1.RectangularPrism
 */
export interface RectangularPrism {
    /**
     * @generated from protobuf field: viam.common.v1.Vector3 dims_mm = 1;
     */
    dimsMm?: Vector3;
}
/**
 * Geometry contains the dimensions of a given geometry and the pose of its center. The geometry is one of either a sphere or a box.
 *
 * @generated from protobuf message viam.common.v1.Geometry
 */
export interface Geometry {
    /**
     * Pose of a gemetries center point
     *
     * @generated from protobuf field: viam.common.v1.Pose center = 1;
     */
    center?: Pose;
    /**
     * @generated from protobuf oneof: geometry_type
     */
    geometryType: {
        oneofKind: "sphere";
        /**
         * @generated from protobuf field: viam.common.v1.Sphere sphere = 2;
         */
        sphere: Sphere;
    } | {
        oneofKind: "box";
        /**
         * @generated from protobuf field: viam.common.v1.RectangularPrism box = 3;
         */
        box: RectangularPrism;
    } | {
        oneofKind: undefined;
    };
    /**
     * Label of the geometry. If none supplied, will be an empty string.
     *
     * @generated from protobuf field: string label = 4;
     */
    label: string;
}
/**
 * GeometriesinFrame contains the dimensions of a given geometry, pose of its center point, and the reference frame by which it was
 * observed.
 *
 * @generated from protobuf message viam.common.v1.GeometriesInFrame
 */
export interface GeometriesInFrame {
    /**
     * Reference frame of the observer of the geometry
     *
     * @generated from protobuf field: string reference_frame = 1;
     */
    referenceFrame: string;
    /**
     * Dimensional type
     *
     * @generated from protobuf field: repeated viam.common.v1.Geometry geometries = 2;
     */
    geometries: Geometry[];
}
/**
 * PointCloudObject contains an image in bytes with point cloud data of all of the objects captured by a given observer as well as a
 * repeated list of geometries which respresents the center point and geometry of each of the objects within the point cloud
 *
 * @generated from protobuf message viam.common.v1.PointCloudObject
 */
export interface PointCloudObject {
    /**
     * image frame expressed in bytes
     *
     * @generated from protobuf field: bytes point_cloud = 1;
     */
    pointCloud: Uint8Array;
    /**
     * volume of a given geometry
     *
     * @generated from protobuf field: viam.common.v1.GeometriesInFrame geometries = 2;
     */
    geometries?: GeometriesInFrame;
}
/**
 * @generated from protobuf message viam.common.v1.GeoPoint
 */
export interface GeoPoint {
    /**
     * @generated from protobuf field: double latitude = 1;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number;
}
/**
 * Transform contains a pose and two reference frames. The first reference frame is the starting reference frame, and the second reference
 * frame is the observer reference frame. The second reference frame has a pose which represents the pose of an object in the first
 * reference frame as observed within the second reference frame.
 *
 * @generated from protobuf message viam.common.v1.Transform
 */
export interface Transform {
    /**
     * the name of a given reference frame
     *
     * @generated from protobuf field: string reference_frame = 1;
     */
    referenceFrame: string;
    /**
     * the pose of the above reference frame with respect to a different observer reference frame
     *
     * @generated from protobuf field: viam.common.v1.PoseInFrame pose_in_observer_frame = 2;
     */
    poseInObserverFrame?: PoseInFrame;
}
/**
 * WorldState contains information about the physical environment around a given robot. All of the fields within this message are optional,
 * they can include information about the physical dimensions of an obstacle, the freespace of a robot, and any desired transforms between a
 * given reference frame and a new target reference frame.
 *
 * @generated from protobuf message viam.common.v1.WorldState
 */
export interface WorldState {
    /**
     * a list of obstacles expressed as a geometry and the reference frame in which it was observed; this field is optional
     *
     * @generated from protobuf field: repeated viam.common.v1.GeometriesInFrame obstacles = 1;
     */
    obstacles: GeometriesInFrame[];
    /**
     * a list of spaces the robot is allowed to operate within expressed as a geometry and the reference frame it is measured fom;
     * this field is optional
     *
     * @generated from protobuf field: repeated viam.common.v1.GeometriesInFrame interaction_spaces = 2;
     */
    interactionSpaces: GeometriesInFrame[];
    /**
     * a list of Transforms needed to transform a pose from one reference frame to another; this field is optional
     *
     * @generated from protobuf field: repeated viam.common.v1.Transform transforms = 3;
     */
    transforms: Transform[];
}
/**
 * ActuatorStatus is a generic status for resources that only need to return actuator status.
 *
 * @generated from protobuf message viam.common.v1.ActuatorStatus
 */
export interface ActuatorStatus {
    /**
     * @generated from protobuf field: bool is_moving = 1;
     */
    isMoving: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ResourceName$Type extends MessageType<ResourceName> {
    constructor() {
        super("viam.common.v1.ResourceName", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subtype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.ResourceName
 */
export const ResourceName = new ResourceName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoardStatus$Type extends MessageType<BoardStatus> {
    constructor() {
        super("viam.common.v1.BoardStatus", [
            { no: 1, name: "analogs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => AnalogStatus } },
            { no: 2, name: "digital_interrupts", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => DigitalInterruptStatus } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.BoardStatus
 */
export const BoardStatus = new BoardStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnalogStatus$Type extends MessageType<AnalogStatus> {
    constructor() {
        super("viam.common.v1.AnalogStatus", [
            { no: 1, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.AnalogStatus
 */
export const AnalogStatus = new AnalogStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigitalInterruptStatus$Type extends MessageType<DigitalInterruptStatus> {
    constructor() {
        super("viam.common.v1.DigitalInterruptStatus", [
            { no: 1, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.DigitalInterruptStatus
 */
export const DigitalInterruptStatus = new DigitalInterruptStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pose$Type extends MessageType<Pose> {
    constructor() {
        super("viam.common.v1.Pose", [
            { no: 1, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "o_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "o_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "o_z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "theta", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Pose
 */
export const Pose = new Pose$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Orientation$Type extends MessageType<Orientation> {
    constructor() {
        super("viam.common.v1.Orientation", [
            { no: 1, name: "o_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "o_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "o_z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "theta", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Orientation
 */
export const Orientation = new Orientation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoseInFrame$Type extends MessageType<PoseInFrame> {
    constructor() {
        super("viam.common.v1.PoseInFrame", [
            { no: 1, name: "reference_frame", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pose", kind: "message", T: () => Pose }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.PoseInFrame
 */
export const PoseInFrame = new PoseInFrame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vector3$Type extends MessageType<Vector3> {
    constructor() {
        super("viam.common.v1.Vector3", [
            { no: 1, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "z", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Vector3
 */
export const Vector3 = new Vector3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sphere$Type extends MessageType<Sphere> {
    constructor() {
        super("viam.common.v1.Sphere", [
            { no: 1, name: "radius_mm", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Sphere
 */
export const Sphere = new Sphere$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RectangularPrism$Type extends MessageType<RectangularPrism> {
    constructor() {
        super("viam.common.v1.RectangularPrism", [
            { no: 1, name: "dims_mm", kind: "message", T: () => Vector3 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.RectangularPrism
 */
export const RectangularPrism = new RectangularPrism$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Geometry$Type extends MessageType<Geometry> {
    constructor() {
        super("viam.common.v1.Geometry", [
            { no: 1, name: "center", kind: "message", T: () => Pose },
            { no: 2, name: "sphere", kind: "message", oneof: "geometryType", T: () => Sphere },
            { no: 3, name: "box", kind: "message", oneof: "geometryType", T: () => RectangularPrism },
            { no: 4, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Geometry
 */
export const Geometry = new Geometry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeometriesInFrame$Type extends MessageType<GeometriesInFrame> {
    constructor() {
        super("viam.common.v1.GeometriesInFrame", [
            { no: 1, name: "reference_frame", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "geometries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Geometry }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.GeometriesInFrame
 */
export const GeometriesInFrame = new GeometriesInFrame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PointCloudObject$Type extends MessageType<PointCloudObject> {
    constructor() {
        super("viam.common.v1.PointCloudObject", [
            { no: 1, name: "point_cloud", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "geometries", kind: "message", T: () => GeometriesInFrame }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.PointCloudObject
 */
export const PointCloudObject = new PointCloudObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoPoint$Type extends MessageType<GeoPoint> {
    constructor() {
        super("viam.common.v1.GeoPoint", [
            { no: 1, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.GeoPoint
 */
export const GeoPoint = new GeoPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Transform$Type extends MessageType<Transform> {
    constructor() {
        super("viam.common.v1.Transform", [
            { no: 1, name: "reference_frame", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pose_in_observer_frame", kind: "message", T: () => PoseInFrame }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.Transform
 */
export const Transform = new Transform$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldState$Type extends MessageType<WorldState> {
    constructor() {
        super("viam.common.v1.WorldState", [
            { no: 1, name: "obstacles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeometriesInFrame },
            { no: 2, name: "interaction_spaces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeometriesInFrame },
            { no: 3, name: "transforms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Transform }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.WorldState
 */
export const WorldState = new WorldState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActuatorStatus$Type extends MessageType<ActuatorStatus> {
    constructor() {
        super("viam.common.v1.ActuatorStatus", [
            { no: 1, name: "is_moving", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.common.v1.ActuatorStatus
 */
export const ActuatorStatus = new ActuatorStatus$Type();
