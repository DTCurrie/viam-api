// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/slam/v1/slam.proto" (package "viam.service.slam.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SLAMService } from "./slam_pb";
import type { GetMapResponse } from "./slam_pb";
import type { GetMapRequest } from "./slam_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetPositionResponse } from "./slam_pb";
import type { GetPositionRequest } from "./slam_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A SlamService declares the gRPC contract for a slam service
 *
 * @generated from protobuf service viam.service.slam.v1.SLAMService
 */
export interface ISLAMServiceClient {
    /**
     * GetPosition returns the current estimated position of the robot with
     * respect to the "origin" of the map.
     *
     * @generated from protobuf rpc: GetPosition(viam.service.slam.v1.GetPositionRequest) returns (viam.service.slam.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse>;
    /**
     * GetMap returns the latest map image or point cloud generated by the
     * SLAM library
     *
     * @generated from protobuf rpc: GetMap(viam.service.slam.v1.GetMapRequest) returns (viam.service.slam.v1.GetMapResponse);
     */
    getMap(input: GetMapRequest, options?: RpcOptions): UnaryCall<GetMapRequest, GetMapResponse>;
}
/**
 * A SlamService declares the gRPC contract for a slam service
 *
 * @generated from protobuf service viam.service.slam.v1.SLAMService
 */
export class SLAMServiceClient implements ISLAMServiceClient, ServiceInfo {
    typeName = SLAMService.typeName;
    methods = SLAMService.methods;
    options = SLAMService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetPosition returns the current estimated position of the robot with
     * respect to the "origin" of the map.
     *
     * @generated from protobuf rpc: GetPosition(viam.service.slam.v1.GetPositionRequest) returns (viam.service.slam.v1.GetPositionResponse);
     */
    getPosition(input: GetPositionRequest, options?: RpcOptions): UnaryCall<GetPositionRequest, GetPositionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPositionRequest, GetPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetMap returns the latest map image or point cloud generated by the
     * SLAM library
     *
     * @generated from protobuf rpc: GetMap(viam.service.slam.v1.GetMapRequest) returns (viam.service.slam.v1.GetMapResponse);
     */
    getMap(input: GetMapRequest, options?: RpcOptions): UnaryCall<GetMapRequest, GetMapResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMapRequest, GetMapResponse>("unary", this._transport, method, opt, input);
    }
}
