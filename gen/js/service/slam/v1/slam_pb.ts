// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/slam/v1/slam.proto" (package "viam.service.slam.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { PointCloudObject } from "../../../common/v1/common_pb";
import { Pose } from "../../../common/v1/common_pb";
import { Struct } from "../../../google/protobuf/struct_pb";
import { PoseInFrame } from "../../../common/v1/common_pb";
/**
 * @generated from protobuf message viam.service.slam.v1.GetPositionRequest
 */
export interface GetPositionRequest {
    /**
     * Name of slam service
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message viam.service.slam.v1.GetPositionResponse
 */
export interface GetPositionResponse {
    /**
     * Current position of the robot within the World frame.
     *
     * @generated from protobuf field: viam.common.v1.PoseInFrame pose = 1;
     */
    pose?: PoseInFrame;
    /**
     * Additional arguments to the method
     *
     * @generated from protobuf field: google.protobuf.Struct extra = 99;
     */
    extra?: Struct;
}
/**
 * @generated from protobuf message viam.service.slam.v1.GetMapRequest
 */
export interface GetMapRequest {
    /**
     * Name of slam service
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Requested MIME type of response (image/jpeg or image/pcd)
     *
     * @generated from protobuf field: string mime_type = 2;
     */
    mimeType: string;
    /**
     * Optional parameter for image/jpeg mime_type, used to project point
     * cloud into a 2D image.
     *
     * @generated from protobuf field: optional viam.common.v1.Pose camera_position = 3;
     */
    cameraPosition?: Pose;
    /**
     * Optional parameter for image/jpeg mime_type, defaults to false.
     * Tells us whether to include the robot position on the 2D image.
     *
     * @generated from protobuf field: bool include_robot_marker = 4;
     */
    includeRobotMarker: boolean;
}
/**
 * @generated from protobuf message viam.service.slam.v1.GetMapResponse
 */
export interface GetMapResponse {
    /**
     * @generated from protobuf oneof: map
     */
    map: {
        oneofKind: "pointCloud";
        /**
         * @generated from protobuf field: viam.common.v1.PointCloudObject point_cloud = 1;
         */
        pointCloud: PointCloudObject;
    } | {
        oneofKind: "image";
        /**
         * @generated from protobuf field: bytes image = 2;
         */
        image: Uint8Array;
    } | {
        oneofKind: undefined;
    };
    /**
     * Actual MIME type of response (image/jpeg or image/pcd)
     *
     * @generated from protobuf field: string mime_type = 3;
     */
    mimeType: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPositionRequest$Type extends MessageType<GetPositionRequest> {
    constructor() {
        super("viam.service.slam.v1.GetPositionRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.service.slam.v1.GetPositionRequest
 */
export const GetPositionRequest = new GetPositionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPositionResponse$Type extends MessageType<GetPositionResponse> {
    constructor() {
        super("viam.service.slam.v1.GetPositionResponse", [
            { no: 1, name: "pose", kind: "message", T: () => PoseInFrame },
            { no: 99, name: "extra", kind: "message", T: () => Struct }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.service.slam.v1.GetPositionResponse
 */
export const GetPositionResponse = new GetPositionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapRequest$Type extends MessageType<GetMapRequest> {
    constructor() {
        super("viam.service.slam.v1.GetMapRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "camera_position", kind: "message", T: () => Pose },
            { no: 4, name: "include_robot_marker", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.service.slam.v1.GetMapRequest
 */
export const GetMapRequest = new GetMapRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapResponse$Type extends MessageType<GetMapResponse> {
    constructor() {
        super("viam.service.slam.v1.GetMapResponse", [
            { no: 1, name: "point_cloud", kind: "message", oneof: "map", T: () => PointCloudObject },
            { no: 2, name: "image", kind: "scalar", oneof: "map", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message viam.service.slam.v1.GetMapResponse
 */
export const GetMapResponse = new GetMapResponse$Type();
/**
 * @generated ServiceType for protobuf service viam.service.slam.v1.SLAMService
 */
export const SLAMService = new ServiceType("viam.service.slam.v1.SLAMService", [
    { name: "GetPosition", options: { "google.api.http": { get: "/viam/api/v1/service/slam/{name}/position" } }, I: GetPositionRequest, O: GetPositionResponse },
    { name: "GetMap", options: { "google.api.http": { get: "/viam/api/v1/service/slam/{name}/map" } }, I: GetMapRequest, O: GetMapResponse }
]);
