// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/datamanager/v1/data_manager.proto" (package "viam.service.datamanager.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataManagerService } from "./data_manager_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SyncResponse } from "./data_manager_pb";
import type { SyncRequest } from "./data_manager_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A DataManagerService service manages data between the robot and the cloud.
 *
 * @generated from protobuf service viam.service.datamanager.v1.DataManagerService
 */
export interface IDataManagerServiceClient {
    /**
     * Sync performs a sync of the non-synced files for the specified service name,
     *
     * @generated from protobuf rpc: Sync(viam.service.datamanager.v1.SyncRequest) returns (viam.service.datamanager.v1.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): UnaryCall<SyncRequest, SyncResponse>;
}
/**
 * A DataManagerService service manages data between the robot and the cloud.
 *
 * @generated from protobuf service viam.service.datamanager.v1.DataManagerService
 */
export class DataManagerServiceClient implements IDataManagerServiceClient, ServiceInfo {
    typeName = DataManagerService.typeName;
    methods = DataManagerService.methods;
    options = DataManagerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Sync performs a sync of the non-synced files for the specified service name,
     *
     * @generated from protobuf rpc: Sync(viam.service.datamanager.v1.SyncRequest) returns (viam.service.datamanager.v1.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): UnaryCall<SyncRequest, SyncResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncRequest, SyncResponse>("unary", this._transport, method, opt, input);
    }
}
