// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/sensors/v1/sensors.proto" (package "viam.service.sensors.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SensorsService } from "./sensors_pb";
import type { GetReadingsResponse } from "./sensors_pb";
import type { GetReadingsRequest } from "./sensors_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSensorsResponse } from "./sensors_pb";
import type { GetSensorsRequest } from "./sensors_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A SensorsService services keeps track of all sensors associated with a robot
 *
 * @generated from protobuf service viam.service.sensors.v1.SensorsService
 */
export interface ISensorsServiceClient {
    /**
     * GetSensors returns the list of all sensors.
     *
     * @generated from protobuf rpc: GetSensors(viam.service.sensors.v1.GetSensorsRequest) returns (viam.service.sensors.v1.GetSensorsResponse);
     */
    getSensors(input: GetSensorsRequest, options?: RpcOptions): UnaryCall<GetSensorsRequest, GetSensorsResponse>;
    /**
     * GetReadings returns the list of readings for all sensors specified.
     *
     * @generated from protobuf rpc: GetReadings(viam.service.sensors.v1.GetReadingsRequest) returns (viam.service.sensors.v1.GetReadingsResponse);
     */
    getReadings(input: GetReadingsRequest, options?: RpcOptions): UnaryCall<GetReadingsRequest, GetReadingsResponse>;
}
/**
 * A SensorsService services keeps track of all sensors associated with a robot
 *
 * @generated from protobuf service viam.service.sensors.v1.SensorsService
 */
export class SensorsServiceClient implements ISensorsServiceClient, ServiceInfo {
    typeName = SensorsService.typeName;
    methods = SensorsService.methods;
    options = SensorsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetSensors returns the list of all sensors.
     *
     * @generated from protobuf rpc: GetSensors(viam.service.sensors.v1.GetSensorsRequest) returns (viam.service.sensors.v1.GetSensorsResponse);
     */
    getSensors(input: GetSensorsRequest, options?: RpcOptions): UnaryCall<GetSensorsRequest, GetSensorsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSensorsRequest, GetSensorsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetReadings returns the list of readings for all sensors specified.
     *
     * @generated from protobuf rpc: GetReadings(viam.service.sensors.v1.GetReadingsRequest) returns (viam.service.sensors.v1.GetReadingsResponse);
     */
    getReadings(input: GetReadingsRequest, options?: RpcOptions): UnaryCall<GetReadingsRequest, GetReadingsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetReadingsRequest, GetReadingsResponse>("unary", this._transport, method, opt, input);
    }
}
