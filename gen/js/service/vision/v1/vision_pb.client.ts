// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/vision/v1/vision.proto" (package "viam.service.vision.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VisionService } from "./vision_pb";
import type { GetObjectPointCloudsResponse } from "./vision_pb";
import type { GetObjectPointCloudsRequest } from "./vision_pb";
import type { RemoveSegmenterResponse } from "./vision_pb";
import type { RemoveSegmenterRequest } from "./vision_pb";
import type { AddSegmenterResponse } from "./vision_pb";
import type { AddSegmenterRequest } from "./vision_pb";
import type { GetSegmenterNamesResponse } from "./vision_pb";
import type { GetSegmenterNamesRequest } from "./vision_pb";
import type { GetClassificationsResponse } from "./vision_pb";
import type { GetClassificationsRequest } from "./vision_pb";
import type { GetClassificationsFromCameraResponse } from "./vision_pb";
import type { GetClassificationsFromCameraRequest } from "./vision_pb";
import type { RemoveClassifierResponse } from "./vision_pb";
import type { RemoveClassifierRequest } from "./vision_pb";
import type { AddClassifierResponse } from "./vision_pb";
import type { AddClassifierRequest } from "./vision_pb";
import type { GetClassifierNamesResponse } from "./vision_pb";
import type { GetClassifierNamesRequest } from "./vision_pb";
import type { GetDetectionsResponse } from "./vision_pb";
import type { GetDetectionsRequest } from "./vision_pb";
import type { GetDetectionsFromCameraResponse } from "./vision_pb";
import type { GetDetectionsFromCameraRequest } from "./vision_pb";
import type { RemoveDetectorResponse } from "./vision_pb";
import type { RemoveDetectorRequest } from "./vision_pb";
import type { AddDetectorResponse } from "./vision_pb";
import type { AddDetectorRequest } from "./vision_pb";
import type { GetDetectorNamesResponse } from "./vision_pb";
import type { GetDetectorNamesRequest } from "./vision_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetModelParameterSchemaResponse } from "./vision_pb";
import type { GetModelParameterSchemaRequest } from "./vision_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * VisionService declares the gRPC contract for a vision service
 *
 * @generated from protobuf service viam.service.vision.v1.VisionService
 */
export interface IVisionServiceClient {
    /**
     * GetModelParameterSchema takes the model name and returns the parameters needed to add one to the vision registry.
     *
     * @generated from protobuf rpc: GetModelParameterSchema(viam.service.vision.v1.GetModelParameterSchemaRequest) returns (viam.service.vision.v1.GetModelParameterSchemaResponse);
     */
    getModelParameterSchema(input: GetModelParameterSchemaRequest, options?: RpcOptions): UnaryCall<GetModelParameterSchemaRequest, GetModelParameterSchemaResponse>;
    /**
     * GetDetectorNames returns the list of detectors in the registry.
     *
     * @generated from protobuf rpc: GetDetectorNames(viam.service.vision.v1.GetDetectorNamesRequest) returns (viam.service.vision.v1.GetDetectorNamesResponse);
     */
    getDetectorNames(input: GetDetectorNamesRequest, options?: RpcOptions): UnaryCall<GetDetectorNamesRequest, GetDetectorNamesResponse>;
    /**
     * AddDetector adds a new detector to the registry.
     *
     * @generated from protobuf rpc: AddDetector(viam.service.vision.v1.AddDetectorRequest) returns (viam.service.vision.v1.AddDetectorResponse);
     */
    addDetector(input: AddDetectorRequest, options?: RpcOptions): UnaryCall<AddDetectorRequest, AddDetectorResponse>;
    /**
     * RemoveDetector removes a detector from the registry.
     *
     * @generated from protobuf rpc: RemoveDetector(viam.service.vision.v1.RemoveDetectorRequest) returns (viam.service.vision.v1.RemoveDetectorResponse);
     */
    removeDetector(input: RemoveDetectorRequest, options?: RpcOptions): UnaryCall<RemoveDetectorRequest, RemoveDetectorResponse>;
    /**
     * GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
     *
     * @generated from protobuf rpc: GetDetectionsFromCamera(viam.service.vision.v1.GetDetectionsFromCameraRequest) returns (viam.service.vision.v1.GetDetectionsFromCameraResponse);
     */
    getDetectionsFromCamera(input: GetDetectionsFromCameraRequest, options?: RpcOptions): UnaryCall<GetDetectionsFromCameraRequest, GetDetectionsFromCameraResponse>;
    /**
     * GetDetections will return a list of detections in the next image given the image bytes and a detector
     *
     * @generated from protobuf rpc: GetDetections(viam.service.vision.v1.GetDetectionsRequest) returns (viam.service.vision.v1.GetDetectionsResponse);
     */
    getDetections(input: GetDetectionsRequest, options?: RpcOptions): UnaryCall<GetDetectionsRequest, GetDetectionsResponse>;
    // Classification methods

    /**
     * GetClassifierNames returns the list of classifiers in the registry.
     *
     * @generated from protobuf rpc: GetClassifierNames(viam.service.vision.v1.GetClassifierNamesRequest) returns (viam.service.vision.v1.GetClassifierNamesResponse);
     */
    getClassifierNames(input: GetClassifierNamesRequest, options?: RpcOptions): UnaryCall<GetClassifierNamesRequest, GetClassifierNamesResponse>;
    /**
     * AddClassifier adds a new classifier to the registry.
     *
     * @generated from protobuf rpc: AddClassifier(viam.service.vision.v1.AddClassifierRequest) returns (viam.service.vision.v1.AddClassifierResponse);
     */
    addClassifier(input: AddClassifierRequest, options?: RpcOptions): UnaryCall<AddClassifierRequest, AddClassifierResponse>;
    /**
     * RemoveClassifier adds a new classifier to the registry.
     *
     * @generated from protobuf rpc: RemoveClassifier(viam.service.vision.v1.RemoveClassifierRequest) returns (viam.service.vision.v1.RemoveClassifierResponse);
     */
    removeClassifier(input: RemoveClassifierRequest, options?: RpcOptions): UnaryCall<RemoveClassifierRequest, RemoveClassifierResponse>;
    /**
     * GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
     *
     * @generated from protobuf rpc: GetClassificationsFromCamera(viam.service.vision.v1.GetClassificationsFromCameraRequest) returns (viam.service.vision.v1.GetClassificationsFromCameraResponse);
     */
    getClassificationsFromCamera(input: GetClassificationsFromCameraRequest, options?: RpcOptions): UnaryCall<GetClassificationsFromCameraRequest, GetClassificationsFromCameraResponse>;
    /**
     * GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
     *
     * @generated from protobuf rpc: GetClassifications(viam.service.vision.v1.GetClassificationsRequest) returns (viam.service.vision.v1.GetClassificationsResponse);
     */
    getClassifications(input: GetClassificationsRequest, options?: RpcOptions): UnaryCall<GetClassificationsRequest, GetClassificationsResponse>;
    // Segmentation methods

    /**
     * GetSegmenterNames returns the list of segmenters in the registry.
     *
     * @generated from protobuf rpc: GetSegmenterNames(viam.service.vision.v1.GetSegmenterNamesRequest) returns (viam.service.vision.v1.GetSegmenterNamesResponse);
     */
    getSegmenterNames(input: GetSegmenterNamesRequest, options?: RpcOptions): UnaryCall<GetSegmenterNamesRequest, GetSegmenterNamesResponse>;
    /**
     * AddSegmenter adds a new segmenter to the registry.
     *
     * @generated from protobuf rpc: AddSegmenter(viam.service.vision.v1.AddSegmenterRequest) returns (viam.service.vision.v1.AddSegmenterResponse);
     */
    addSegmenter(input: AddSegmenterRequest, options?: RpcOptions): UnaryCall<AddSegmenterRequest, AddSegmenterResponse>;
    /**
     * RemoveSegmenter removes a segmenter from the registry.
     *
     * @generated from protobuf rpc: RemoveSegmenter(viam.service.vision.v1.RemoveSegmenterRequest) returns (viam.service.vision.v1.RemoveSegmenterResponse);
     */
    removeSegmenter(input: RemoveSegmenterRequest, options?: RpcOptions): UnaryCall<RemoveSegmenterRequest, RemoveSegmenterResponse>;
    /**
     * GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
     * as well as the 3-vector center of each of the found objects.
     * A specific MIME type can be requested but may not necessarily be the same one returned.
     *
     * @generated from protobuf rpc: GetObjectPointClouds(viam.service.vision.v1.GetObjectPointCloudsRequest) returns (viam.service.vision.v1.GetObjectPointCloudsResponse);
     */
    getObjectPointClouds(input: GetObjectPointCloudsRequest, options?: RpcOptions): UnaryCall<GetObjectPointCloudsRequest, GetObjectPointCloudsResponse>;
}
/**
 * VisionService declares the gRPC contract for a vision service
 *
 * @generated from protobuf service viam.service.vision.v1.VisionService
 */
export class VisionServiceClient implements IVisionServiceClient, ServiceInfo {
    typeName = VisionService.typeName;
    methods = VisionService.methods;
    options = VisionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetModelParameterSchema takes the model name and returns the parameters needed to add one to the vision registry.
     *
     * @generated from protobuf rpc: GetModelParameterSchema(viam.service.vision.v1.GetModelParameterSchemaRequest) returns (viam.service.vision.v1.GetModelParameterSchemaResponse);
     */
    getModelParameterSchema(input: GetModelParameterSchemaRequest, options?: RpcOptions): UnaryCall<GetModelParameterSchemaRequest, GetModelParameterSchemaResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetModelParameterSchemaRequest, GetModelParameterSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDetectorNames returns the list of detectors in the registry.
     *
     * @generated from protobuf rpc: GetDetectorNames(viam.service.vision.v1.GetDetectorNamesRequest) returns (viam.service.vision.v1.GetDetectorNamesResponse);
     */
    getDetectorNames(input: GetDetectorNamesRequest, options?: RpcOptions): UnaryCall<GetDetectorNamesRequest, GetDetectorNamesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDetectorNamesRequest, GetDetectorNamesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AddDetector adds a new detector to the registry.
     *
     * @generated from protobuf rpc: AddDetector(viam.service.vision.v1.AddDetectorRequest) returns (viam.service.vision.v1.AddDetectorResponse);
     */
    addDetector(input: AddDetectorRequest, options?: RpcOptions): UnaryCall<AddDetectorRequest, AddDetectorResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddDetectorRequest, AddDetectorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RemoveDetector removes a detector from the registry.
     *
     * @generated from protobuf rpc: RemoveDetector(viam.service.vision.v1.RemoveDetectorRequest) returns (viam.service.vision.v1.RemoveDetectorResponse);
     */
    removeDetector(input: RemoveDetectorRequest, options?: RpcOptions): UnaryCall<RemoveDetectorRequest, RemoveDetectorResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveDetectorRequest, RemoveDetectorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
     *
     * @generated from protobuf rpc: GetDetectionsFromCamera(viam.service.vision.v1.GetDetectionsFromCameraRequest) returns (viam.service.vision.v1.GetDetectionsFromCameraResponse);
     */
    getDetectionsFromCamera(input: GetDetectionsFromCameraRequest, options?: RpcOptions): UnaryCall<GetDetectionsFromCameraRequest, GetDetectionsFromCameraResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDetectionsFromCameraRequest, GetDetectionsFromCameraResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDetections will return a list of detections in the next image given the image bytes and a detector
     *
     * @generated from protobuf rpc: GetDetections(viam.service.vision.v1.GetDetectionsRequest) returns (viam.service.vision.v1.GetDetectionsResponse);
     */
    getDetections(input: GetDetectionsRequest, options?: RpcOptions): UnaryCall<GetDetectionsRequest, GetDetectionsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDetectionsRequest, GetDetectionsResponse>("unary", this._transport, method, opt, input);
    }
    // Classification methods

    /**
     * GetClassifierNames returns the list of classifiers in the registry.
     *
     * @generated from protobuf rpc: GetClassifierNames(viam.service.vision.v1.GetClassifierNamesRequest) returns (viam.service.vision.v1.GetClassifierNamesResponse);
     */
    getClassifierNames(input: GetClassifierNamesRequest, options?: RpcOptions): UnaryCall<GetClassifierNamesRequest, GetClassifierNamesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetClassifierNamesRequest, GetClassifierNamesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AddClassifier adds a new classifier to the registry.
     *
     * @generated from protobuf rpc: AddClassifier(viam.service.vision.v1.AddClassifierRequest) returns (viam.service.vision.v1.AddClassifierResponse);
     */
    addClassifier(input: AddClassifierRequest, options?: RpcOptions): UnaryCall<AddClassifierRequest, AddClassifierResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddClassifierRequest, AddClassifierResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RemoveClassifier adds a new classifier to the registry.
     *
     * @generated from protobuf rpc: RemoveClassifier(viam.service.vision.v1.RemoveClassifierRequest) returns (viam.service.vision.v1.RemoveClassifierResponse);
     */
    removeClassifier(input: RemoveClassifierRequest, options?: RpcOptions): UnaryCall<RemoveClassifierRequest, RemoveClassifierResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveClassifierRequest, RemoveClassifierResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
     *
     * @generated from protobuf rpc: GetClassificationsFromCamera(viam.service.vision.v1.GetClassificationsFromCameraRequest) returns (viam.service.vision.v1.GetClassificationsFromCameraResponse);
     */
    getClassificationsFromCamera(input: GetClassificationsFromCameraRequest, options?: RpcOptions): UnaryCall<GetClassificationsFromCameraRequest, GetClassificationsFromCameraResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetClassificationsFromCameraRequest, GetClassificationsFromCameraResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
     *
     * @generated from protobuf rpc: GetClassifications(viam.service.vision.v1.GetClassificationsRequest) returns (viam.service.vision.v1.GetClassificationsResponse);
     */
    getClassifications(input: GetClassificationsRequest, options?: RpcOptions): UnaryCall<GetClassificationsRequest, GetClassificationsResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetClassificationsRequest, GetClassificationsResponse>("unary", this._transport, method, opt, input);
    }
    // Segmentation methods

    /**
     * GetSegmenterNames returns the list of segmenters in the registry.
     *
     * @generated from protobuf rpc: GetSegmenterNames(viam.service.vision.v1.GetSegmenterNamesRequest) returns (viam.service.vision.v1.GetSegmenterNamesResponse);
     */
    getSegmenterNames(input: GetSegmenterNamesRequest, options?: RpcOptions): UnaryCall<GetSegmenterNamesRequest, GetSegmenterNamesResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSegmenterNamesRequest, GetSegmenterNamesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AddSegmenter adds a new segmenter to the registry.
     *
     * @generated from protobuf rpc: AddSegmenter(viam.service.vision.v1.AddSegmenterRequest) returns (viam.service.vision.v1.AddSegmenterResponse);
     */
    addSegmenter(input: AddSegmenterRequest, options?: RpcOptions): UnaryCall<AddSegmenterRequest, AddSegmenterResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddSegmenterRequest, AddSegmenterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RemoveSegmenter removes a segmenter from the registry.
     *
     * @generated from protobuf rpc: RemoveSegmenter(viam.service.vision.v1.RemoveSegmenterRequest) returns (viam.service.vision.v1.RemoveSegmenterResponse);
     */
    removeSegmenter(input: RemoveSegmenterRequest, options?: RpcOptions): UnaryCall<RemoveSegmenterRequest, RemoveSegmenterResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveSegmenterRequest, RemoveSegmenterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
     * as well as the 3-vector center of each of the found objects.
     * A specific MIME type can be requested but may not necessarily be the same one returned.
     *
     * @generated from protobuf rpc: GetObjectPointClouds(viam.service.vision.v1.GetObjectPointCloudsRequest) returns (viam.service.vision.v1.GetObjectPointCloudsResponse);
     */
    getObjectPointClouds(input: GetObjectPointCloudsRequest, options?: RpcOptions): UnaryCall<GetObjectPointCloudsRequest, GetObjectPointCloudsResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetObjectPointCloudsRequest, GetObjectPointCloudsResponse>("unary", this._transport, method, opt, input);
    }
}
