// @generated by protobuf-ts 2.8.1 with parameter add_pb_suffix,generate_dependencies,force_optimize_code_size,long_type_string,ts_nocheck
// @generated from protobuf file "service/motion/v1/motion.proto" (package "viam.service.motion.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MotionService } from "./motion_pb";
import type { GetPoseResponse } from "./motion_pb";
import type { GetPoseRequest } from "./motion_pb";
import type { MoveSingleComponentResponse } from "./motion_pb";
import type { MoveSingleComponentRequest } from "./motion_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MoveResponse } from "./motion_pb";
import type { MoveRequest } from "./motion_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A MotionService declares the gRPC contract for a motion service
 *
 * @generated from protobuf service viam.service.motion.v1.MotionService
 */
export interface IMotionServiceClient {
    /**
     * @generated from protobuf rpc: Move(viam.service.motion.v1.MoveRequest) returns (viam.service.motion.v1.MoveResponse);
     */
    move(input: MoveRequest, options?: RpcOptions): UnaryCall<MoveRequest, MoveResponse>;
    /**
     * @generated from protobuf rpc: MoveSingleComponent(viam.service.motion.v1.MoveSingleComponentRequest) returns (viam.service.motion.v1.MoveSingleComponentResponse);
     */
    moveSingleComponent(input: MoveSingleComponentRequest, options?: RpcOptions): UnaryCall<MoveSingleComponentRequest, MoveSingleComponentResponse>;
    /**
     * @generated from protobuf rpc: GetPose(viam.service.motion.v1.GetPoseRequest) returns (viam.service.motion.v1.GetPoseResponse);
     */
    getPose(input: GetPoseRequest, options?: RpcOptions): UnaryCall<GetPoseRequest, GetPoseResponse>;
}
/**
 * A MotionService declares the gRPC contract for a motion service
 *
 * @generated from protobuf service viam.service.motion.v1.MotionService
 */
export class MotionServiceClient implements IMotionServiceClient, ServiceInfo {
    typeName = MotionService.typeName;
    methods = MotionService.methods;
    options = MotionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Move(viam.service.motion.v1.MoveRequest) returns (viam.service.motion.v1.MoveResponse);
     */
    move(input: MoveRequest, options?: RpcOptions): UnaryCall<MoveRequest, MoveResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveRequest, MoveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MoveSingleComponent(viam.service.motion.v1.MoveSingleComponentRequest) returns (viam.service.motion.v1.MoveSingleComponentResponse);
     */
    moveSingleComponent(input: MoveSingleComponentRequest, options?: RpcOptions): UnaryCall<MoveSingleComponentRequest, MoveSingleComponentResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveSingleComponentRequest, MoveSingleComponentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPose(viam.service.motion.v1.GetPoseRequest) returns (viam.service.motion.v1.GetPoseResponse);
     */
    getPose(input: GetPoseRequest, options?: RpcOptions): UnaryCall<GetPoseRequest, GetPoseResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPoseRequest, GetPoseResponse>("unary", this._transport, method, opt, input);
    }
}
